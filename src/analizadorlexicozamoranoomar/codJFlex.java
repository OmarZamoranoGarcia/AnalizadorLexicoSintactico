// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analizadorlexicozamoranoomar/codJFlex.flex

package analizadorlexicozamoranoomar;
import static analizadorlexicozamoranoomar.Tokens.*;

@SuppressWarnings("fallthrough")
class codJFlex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\3\5\1\0\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\12\17\1\20\1\21\1\22\1\23"+
    "\1\22\2\5\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\0"+
    "\1\61\1\0\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\0\1\115\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\30\16\1\17\1\20\27\16\1\21\1\22\2\1"+
    "\1\0\1\23\1\0\1\24\1\11\1\2\1\0\1\14"+
    "\37\16\1\25\3\16\1\26\1\27\1\30\16\16\1\31"+
    "\47\16\1\32\10\16\1\33\11\16\1\34\1\16\1\25"+
    "\43\16\1\35\13\16\1\0\1\11\1\36\2\16\1\31"+
    "\7\16\1\37\1\40\5\16\1\41\2\16\1\42\1\16"+
    "\1\43\4\16\1\44\3\16\1\45\2\16\1\46\2\16"+
    "\1\47\3\16\1\50\1\51\1\52\1\53\4\16\1\54"+
    "\5\16\1\55\5\16\1\56\5\16\1\15\1\57\1\60"+
    "\10\16\1\61\2\16\1\62\6\16\1\63\16\16\1\33"+
    "\1\64\1\16\1\65\14\16\1\66\13\16\1\63\5\16"+
    "\1\67\7\16\1\54\1\70\1\71\15\16\1\70\1\16"+
    "\1\72\22\16\1\73\1\16\1\74\13\16\1\1\5\16"+
    "\1\75\6\16\1\76\2\16\1\64\1\16\1\43\1\16"+
    "\1\77\2\16\1\100\1\16\1\35\7\16\1\101\2\16"+
    "\1\102\1\103\3\16\1\104\2\16\1\105\1\16\1\106"+
    "\4\16\1\107\24\16\1\110\7\16\1\111\6\16\1\112"+
    "\1\113\12\16\1\114\1\115\7\16\1\116\1\32\1\117"+
    "\2\16\1\0\1\16\1\0\10\16\1\120\15\16\1\121"+
    "\1\16\1\122\16\16\1\123\4\16\1\124\1\125\7\16"+
    "\1\126\2\16\1\0\1\127\4\16\1\0\6\16\1\130"+
    "\1\131\1\132\1\133\1\134\16\16\1\135\1\16\1\136"+
    "\4\16\1\137\1\140\3\16\1\141\1\142\1\143\1\16"+
    "\1\63\4\16\1\144\1\16\1\145\20\16\1\146\2\0"+
    "\1\16\2\0\1\147\11\16\1\150\3\16\1\151\3\16"+
    "\1\152\4\16\1\153\7\16\1\154\1\155\1\156\1\16"+
    "\1\157\2\16\1\160\1\161\1\162\1\16\1\64\1\0"+
    "\2\16\2\0\1\163\1\16\1\164\1\16\1\165\1\0"+
    "\7\16\1\166\1\167\3\16\1\0\1\170\2\16\1\171"+
    "\1\172\2\16\1\173\5\16\1\174\2\16\1\70\4\16"+
    "\1\175\1\16\1\176\2\16\1\177\2\0\1\200\2\0"+
    "\1\201\12\16\1\202\1\203\1\162\7\16\1\204\1\205"+
    "\1\0\1\206\1\0\2\16\2\0\1\135\1\16\1\0"+
    "\2\16\1\207\2\16\1\210\1\16\1\211\1\16\1\0"+
    "\12\16\4\0\2\16\1\212\1\213\10\16\2\0\1\16"+
    "\2\0\1\163\1\16\1\212\1\0\1\214\1\16\1\215"+
    "\1\0\2\16\1\216\1\0\3\16\4\0\1\16\1\217"+
    "\1\16\1\0\3\16\1\220\1\16\2\0\1\16\1\0"+
    "\1\102\1\221\1\0\1\16\1\222\2\16\1\0\2\16"+
    "\1\223\1\0\1\224\1\0\1\225\1\113\1\0\3\16"+
    "\1\0\1\226\1\16\2\0\3\16\1\0\1\227\1\230"+
    "\1\231\1\0\1\16\1\232\1\16\1\0\1\233\1\234"+
    "\1\0\1\235\2\16\1\236\1\0\1\16\1\0\1\46"+
    "\2\0\1\237";

  private static int [] zzUnpackAction() {
    int [] result = new int[945];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\116\0\116\0\116"+
    "\0\u0186\0\116\0\u01d4\0\116\0\u0222\0\u0270\0\116\0\116"+
    "\0\u02be\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702"+
    "\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972"+
    "\0\u09c0\0\u0a0e\0\116\0\116\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6"+
    "\0\u0e04\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026"+
    "\0\u1074\0\u10c2\0\u1110\0\116\0\116\0\u115e\0\u11ac\0\u0138"+
    "\0\116\0\u11fa\0\116\0\u1248\0\u1296\0\u12e4\0\116\0\u1332"+
    "\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2"+
    "\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812"+
    "\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82"+
    "\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u1d8e\0\u0618\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4"+
    "\0\u2442\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664"+
    "\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44"+
    "\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4"+
    "\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u3024"+
    "\0\u3072\0\u30c0\0\u310e\0\u315c\0\u0618\0\u31aa\0\u31f8\0\u3246"+
    "\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u341a\0\u0618\0\u3468"+
    "\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8"+
    "\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948"+
    "\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8"+
    "\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28"+
    "\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098"+
    "\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u4308"+
    "\0\u4356\0\u12e4\0\u0618\0\u43a4\0\u43f2\0\u0618\0\u4440\0\u448e"+
    "\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614\0\u0618\0\u0618\0\u4662"+
    "\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u0618\0\u47e8\0\u4836\0\u0618"+
    "\0\u4884\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u0618\0\u4a58"+
    "\0\u4aa6\0\u4af4\0\u0618\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a"+
    "\0\u4cc8\0\u4d16\0\u4d64\0\u4db2\0\u0618\0\u0618\0\u0618\0\u0618"+
    "\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38\0\u4f86\0\u4fd4\0\u5022"+
    "\0\u5070\0\u50be\0\u0618\0\u510c\0\u515a\0\u51a8\0\u51f6\0\u5244"+
    "\0\u0618\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\u0618\0\u0618"+
    "\0\u0618\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550\0\u559e\0\u55ec"+
    "\0\u563a\0\u0618\0\u5688\0\u56d6\0\u0618\0\u5724\0\u5772\0\u57c0"+
    "\0\u580e\0\u585c\0\u58aa\0\u0618\0\u58f8\0\u5946\0\u5994\0\u59e2"+
    "\0\u5a30\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68\0\u5bb6\0\u5c04\0\u5c52"+
    "\0\u5ca0\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u0618\0\u5e26\0\u5e74"+
    "\0\u5ec2\0\u5f10\0\u5f5e\0\u5fac\0\u5ffa\0\u6048\0\u6096\0\u60e4"+
    "\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u6306\0\u6354"+
    "\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da\0\u6528\0\u6576\0\u65c4"+
    "\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u0618\0\u674a\0\u6798\0\u67e6"+
    "\0\u6834\0\u6882\0\u68d0\0\u691e\0\u0618\0\u0618\0\u0618\0\u696c"+
    "\0\u69ba\0\u6a08\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e\0\u6bdc"+
    "\0\u6c2a\0\u6c78\0\u6cc6\0\u6d14\0\u6d62\0\u6db0\0\u0618\0\u6dfe"+
    "\0\u6e4c\0\u6e9a\0\u6ee8\0\u6f36\0\u6f84\0\u6fd2\0\u7020\0\u706e"+
    "\0\u70bc\0\u710a\0\u7158\0\u71a6\0\u71f4\0\u7242\0\u7290\0\u72de"+
    "\0\u732c\0\u0618\0\u737a\0\u0618\0\u73c8\0\u7416\0\u7464\0\u74b2"+
    "\0\u7500\0\u754e\0\u759c\0\u75ea\0\u7638\0\u7686\0\u76d4\0\u4356"+
    "\0\u7722\0\u7770\0\u77be\0\u780c\0\u785a\0\u0618\0\u78a8\0\u78f6"+
    "\0\u7944\0\u7992\0\u79e0\0\u7a2e\0\u0618\0\u7a7c\0\u7aca\0\u7b18"+
    "\0\u7b66\0\u0618\0\u7bb4\0\u0618\0\u7c02\0\u7c50\0\u0618\0\u7c9e"+
    "\0\u0618\0\u7cec\0\u7d3a\0\u7d88\0\u7dd6\0\u7e24\0\u7e72\0\u7ec0"+
    "\0\u0618\0\u7f0e\0\u7f5c\0\u0618\0\u0618\0\u7faa\0\u7ff8\0\u8046"+
    "\0\u0618\0\u8094\0\u80e2\0\u0618\0\u8130\0\u0618\0\u817e\0\u81cc"+
    "\0\u821a\0\u8268\0\u82b6\0\u8304\0\u8352\0\u83a0\0\u83ee\0\u843c"+
    "\0\u848a\0\u84d8\0\u8526\0\u8574\0\u85c2\0\u8610\0\u865e\0\u86ac"+
    "\0\u86fa\0\u8748\0\u8796\0\u87e4\0\u8832\0\u8880\0\u88ce\0\u0618"+
    "\0\u891c\0\u896a\0\u89b8\0\u8a06\0\u8a54\0\u8aa2\0\u8af0\0\u0618"+
    "\0\u8b3e\0\u8b8c\0\u8bda\0\u8c28\0\u8c76\0\u8cc4\0\u0618\0\u8d12"+
    "\0\u8d60\0\u8dae\0\u8dfc\0\u8e4a\0\u8e98\0\u8ee6\0\u8f34\0\u8f82"+
    "\0\u8fd0\0\u901e\0\u0618\0\u0618\0\u906c\0\u90ba\0\u9108\0\u9156"+
    "\0\u91a4\0\u91f2\0\u9240\0\u0618\0\u0618\0\u0618\0\u928e\0\u92dc"+
    "\0\u932a\0\u9378\0\u93c6\0\u9414\0\u9462\0\u94b0\0\u94fe\0\u954c"+
    "\0\u959a\0\u95e8\0\u9636\0\u0618\0\u9684\0\u96d2\0\u9720\0\u976e"+
    "\0\u97bc\0\u980a\0\u9858\0\u98a6\0\u98f4\0\u9942\0\u9990\0\u99de"+
    "\0\u9a2c\0\u0618\0\u9a7a\0\u0618\0\u9ac8\0\u9b16\0\u9b64\0\u9bb2"+
    "\0\u9c00\0\u9c4e\0\u9c9c\0\u9cea\0\u9d38\0\u9d86\0\u9dd4\0\u9e22"+
    "\0\u9e70\0\u9ebe\0\u0618\0\u9f0c\0\u9f5a\0\u9fa8\0\u9ff6\0\u0618"+
    "\0\u0618\0\ua044\0\ua092\0\ua0e0\0\ua12e\0\ua17c\0\ua1ca\0\ua218"+
    "\0\u0618\0\ua266\0\ua2b4\0\ua302\0\u0618\0\ua350\0\ua39e\0\ua3ec"+
    "\0\ua43a\0\ua488\0\ua4d6\0\ua524\0\ua572\0\ua5c0\0\ua60e\0\ua65c"+
    "\0\u0618\0\u0618\0\u0618\0\u0618\0\u0618\0\ua6aa\0\ua6f8\0\ua746"+
    "\0\ua794\0\ua7e2\0\ua830\0\ua87e\0\ua8cc\0\ua91a\0\ua968\0\ua9b6"+
    "\0\uaa04\0\uaa52\0\uaaa0\0\uaaee\0\uab3c\0\u0618\0\uab8a\0\uabd8"+
    "\0\uac26\0\uac74\0\u0618\0\u0618\0\uacc2\0\uad10\0\uad5e\0\u0618"+
    "\0\u0618\0\u0618\0\uadac\0\uadfa\0\uae48\0\uae96\0\uaee4\0\uaf32"+
    "\0\u0618\0\uaf80\0\u0618\0\uafce\0\ub01c\0\ub06a\0\ub0b8\0\ub106"+
    "\0\ub154\0\ub1a2\0\ub1f0\0\ub23e\0\ub28c\0\ub2da\0\ub328\0\ub376"+
    "\0\ub3c4\0\ub412\0\ub460\0\u0618\0\ub4ae\0\ub4fc\0\ub54a\0\ub598"+
    "\0\ub5e6\0\u0618\0\ub634\0\ub682\0\ub6d0\0\ub71e\0\ub76c\0\ub7ba"+
    "\0\ub808\0\ub856\0\ub8a4\0\u0618\0\ub8f2\0\ub940\0\ub98e\0\u0618"+
    "\0\ub9dc\0\uba2a\0\uba78\0\u0618\0\ubac6\0\ubb14\0\ubb62\0\ubbb0"+
    "\0\u0618\0\ubbfe\0\ubc4c\0\ubc9a\0\ubce8\0\ubd36\0\ubd84\0\ubdd2"+
    "\0\u0618\0\u0618\0\u0618\0\ube20\0\u0618\0\ube6e\0\ubebc\0\u0618"+
    "\0\u0618\0\ubf0a\0\ubf58\0\u0618\0\ubfa6\0\ubff4\0\uc042\0\uc090"+
    "\0\uc0de\0\u0618\0\uc12c\0\u0618\0\uc17a\0\u0618\0\uc1c8\0\uc216"+
    "\0\uc264\0\uc2b2\0\uc300\0\uc34e\0\uc39c\0\uc3ea\0\u0618\0\u0618"+
    "\0\uc438\0\uc486\0\uc4d4\0\uc522\0\u0618\0\uc570\0\uc5be\0\u0618"+
    "\0\u0618\0\uc60c\0\uc65a\0\u0618\0\uc6a8\0\uc6f6\0\uc744\0\uc792"+
    "\0\uc7e0\0\u0618\0\uc82e\0\uc87c\0\ubd36\0\uc8ca\0\uc918\0\uc966"+
    "\0\uc9b4\0\u0618\0\uca02\0\u0618\0\uca50\0\uca9e\0\u0618\0\ucaec"+
    "\0\ucb3a\0\u0618\0\ucb88\0\ucbd6\0\u0618\0\ucc24\0\ucc72\0\uccc0"+
    "\0\ucd0e\0\ucd5c\0\ucdaa\0\ucdf8\0\uce46\0\uce94\0\ucee2\0\u0618"+
    "\0\u0618\0\u0618\0\ucf30\0\ucf7e\0\ucfcc\0\ud01a\0\ud068\0\ud0b6"+
    "\0\ud104\0\u0618\0\u0618\0\ud152\0\u0618\0\ud1a0\0\ud1ee\0\ud23c"+
    "\0\ud28a\0\ud2d8\0\u0618\0\ud326\0\ud374\0\ud3c2\0\ud410\0\u0618"+
    "\0\ud45e\0\ud4ac\0\u0618\0\ud4fa\0\u0618\0\ud548\0\ud596\0\ud5e4"+
    "\0\ud632\0\ud680\0\ud6ce\0\ud71c\0\ud76a\0\ud7b8\0\ud806\0\ud854"+
    "\0\ud8a2\0\ud8f0\0\ud93e\0\ud98c\0\ud9da\0\uda28\0\uda76\0\u0618"+
    "\0\u0618\0\udac4\0\udb12\0\udb60\0\udbae\0\udbfc\0\udc4a\0\udc98"+
    "\0\udce6\0\udd34\0\udd82\0\uddd0\0\ude1e\0\ude6c\0\116\0\udeba"+
    "\0\116\0\udf08\0\u0618\0\udf56\0\u0618\0\udfa4\0\udff2\0\ue040"+
    "\0\u0618\0\ue08e\0\ue0dc\0\ue12a\0\ue178\0\ue1c6\0\ue214\0\ue262"+
    "\0\ue2b0\0\ue2fe\0\u0618\0\ue34c\0\ue39a\0\ue3e8\0\ue436\0\ue484"+
    "\0\u0618\0\ue4d2\0\ue520\0\ue56e\0\ue5bc\0\ue60a\0\116\0\u0618"+
    "\0\ue658\0\ue6a6\0\116\0\ue6f4\0\ue742\0\ue790\0\ue7de\0\ue82c"+
    "\0\u0618\0\ue87a\0\116\0\ue8c8\0\116\0\u0618\0\ue916\0\ue964"+
    "\0\ue9b2\0\uea00\0\uea4e\0\116\0\uea9c\0\ueaea\0\ueb38\0\ueb86"+
    "\0\uebd4\0\uec22\0\uec70\0\u0618\0\116\0\116\0\uecbe\0\ued0c"+
    "\0\u0618\0\ued5a\0\ueda8\0\116\0\116\0\uedf6\0\u0618\0\uee44"+
    "\0\uee92\0\116\0\ueee0\0\uef2e\0\uef7c\0\u0618\0\uefca\0\uf018"+
    "\0\116";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[945];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\35\1\50\1\51\1\35\1\52\1\53\1\2\1\54"+
    "\1\35\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\2\35\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\35"+
    "\1\102\1\103\1\104\1\105\117\0\2\3\1\0\1\3"+
    "\130\0\1\106\4\0\32\107\3\0\33\107\2\0\6\110"+
    "\1\111\50\110\1\112\36\110\4\0\1\113\115\0\1\113"+
    "\12\0\1\114\102\0\1\113\11\0\1\115\114\0\1\116"+
    "\1\0\1\16\4\0\32\107\3\0\33\107\25\0\1\117"+
    "\111\0\1\35\4\0\3\35\1\120\7\35\1\121\1\35"+
    "\1\122\6\35\1\123\1\124\4\35\3\0\20\35\1\125"+
    "\12\35\21\0\1\35\4\0\4\35\1\126\23\35\1\127"+
    "\1\35\3\0\33\35\21\0\1\35\4\0\1\130\6\35"+
    "\1\131\3\35\1\132\1\133\1\35\1\134\2\35\1\135"+
    "\10\35\3\0\17\35\1\136\13\35\21\0\1\35\4\0"+
    "\1\137\3\35\1\140\3\35\1\141\10\35\1\142\4\35"+
    "\1\143\3\35\3\0\33\35\21\0\1\35\4\0\15\35"+
    "\1\144\2\35\1\145\4\35\1\146\1\35\1\147\2\35"+
    "\3\0\33\35\21\0\1\35\4\0\1\150\15\35\1\151"+
    "\2\35\1\152\2\35\1\153\1\35\1\143\3\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\154\14\35\1\155"+
    "\10\35\3\0\33\35\21\0\1\35\4\0\1\156\31\35"+
    "\3\0\33\35\21\0\1\35\4\0\15\35\1\157\3\35"+
    "\1\160\1\161\7\35\3\0\16\35\1\162\14\35\21\0"+
    "\1\35\4\0\4\35\1\163\1\35\1\164\4\35\1\165"+
    "\1\166\1\167\1\170\13\35\3\0\33\35\21\0\1\35"+
    "\4\0\32\35\3\0\33\35\21\0\1\35\4\0\4\35"+
    "\1\171\3\35\1\172\21\35\3\0\33\35\21\0\1\35"+
    "\4\0\1\173\7\35\1\174\5\35\1\175\5\35\1\176"+
    "\5\35\3\0\5\35\1\177\25\35\21\0\1\35\4\0"+
    "\4\35\1\200\11\35\1\201\5\35\1\202\5\35\3\0"+
    "\33\35\21\0\1\35\4\0\5\35\1\203\13\35\1\204"+
    "\10\35\3\0\20\35\1\205\12\35\21\0\1\35\4\0"+
    "\16\35\1\206\2\35\1\207\1\35\1\150\1\210\5\35"+
    "\3\0\17\35\1\211\2\35\1\212\10\35\21\0\1\35"+
    "\4\0\26\35\1\143\3\35\3\0\33\35\21\0\1\35"+
    "\4\0\4\35\1\213\3\35\1\214\5\35\1\215\13\35"+
    "\3\0\33\35\21\0\1\35\4\0\1\216\3\35\1\217"+
    "\2\35\1\220\14\35\1\221\5\35\3\0\5\35\1\222"+
    "\25\35\21\0\1\35\4\0\1\35\1\223\17\35\1\224"+
    "\10\35\3\0\33\35\21\0\1\35\4\0\15\35\1\225"+
    "\1\35\1\226\12\35\3\0\33\35\21\0\1\35\4\0"+
    "\7\35\1\227\6\35\1\230\13\35\3\0\33\35\21\0"+
    "\1\35\4\0\16\35\1\231\13\35\3\0\33\35\21\0"+
    "\1\35\4\0\10\35\1\232\21\35\3\0\33\35\21\0"+
    "\1\35\4\0\32\35\3\0\2\35\1\233\1\234\1\235"+
    "\7\35\1\236\3\35\1\125\2\35\1\237\1\35\1\240"+
    "\1\35\1\241\3\35\21\0\1\35\4\0\32\35\3\0"+
    "\1\35\1\242\7\35\1\243\5\35\1\244\2\35\1\245"+
    "\6\35\1\246\1\35\21\0\1\35\4\0\32\35\3\0"+
    "\1\35\1\247\6\35\1\250\3\35\1\251\2\35\1\252"+
    "\13\35\21\0\1\35\4\0\32\35\3\0\5\35\1\253"+
    "\11\35\1\254\5\35\1\255\5\35\21\0\1\35\4\0"+
    "\32\35\3\0\14\35\1\256\1\257\1\260\7\35\1\261"+
    "\1\35\1\262\2\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\263\2\35\1\264\1\35\1\265\1\266\2\35"+
    "\1\267\2\35\1\270\5\35\21\0\1\35\4\0\32\35"+
    "\3\0\5\35\1\271\11\35\1\272\1\273\1\35\1\274"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\1\35\1\275"+
    "\3\35\1\276\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\6\35\1\277\6\35\1\300\1\301\14\35\21\0\1\35"+
    "\4\0\32\35\3\0\1\35\1\302\3\35\1\303\11\35"+
    "\1\304\13\35\21\0\1\35\4\0\32\35\3\0\1\35"+
    "\1\305\3\35\1\306\3\35\1\307\5\35\1\310\5\35"+
    "\1\311\5\35\21\0\1\35\4\0\32\35\3\0\3\35"+
    "\1\312\1\35\1\313\17\35\1\314\5\35\21\0\1\35"+
    "\4\0\32\35\3\0\2\35\1\315\15\35\1\205\3\35"+
    "\1\316\1\35\1\317\4\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\320\3\35\1\321\3\35\1\322\5\35"+
    "\1\323\2\35\1\324\2\35\1\325\1\35\1\326\3\35"+
    "\21\0\1\35\4\0\32\35\3\0\25\35\1\327\5\35"+
    "\21\0\1\35\4\0\32\35\3\0\1\35\1\330\3\35"+
    "\1\331\3\35\1\332\21\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\333\3\35\1\334\3\35\1\335\6\35"+
    "\1\336\3\35\1\337\1\340\1\35\1\341\1\35\1\342"+
    "\1\35\21\0\1\35\4\0\32\35\3\0\1\35\1\343"+
    "\6\35\1\344\6\35\1\345\2\35\1\346\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\347\14\35\1\350"+
    "\1\35\1\351\12\35\21\0\1\35\4\0\32\35\3\0"+
    "\1\35\1\352\7\35\1\353\5\35\1\354\13\35\21\0"+
    "\1\35\4\0\32\35\3\0\10\35\1\355\1\356\21\35"+
    "\21\0\1\35\4\0\32\35\3\0\11\35\1\357\21\35"+
    "\21\0\1\35\4\0\32\35\3\0\11\35\1\360\21\35"+
    "\17\0\1\361\1\0\1\106\115\0\1\107\4\0\32\107"+
    "\3\0\33\107\2\0\2\110\2\0\112\110\15\0\1\116"+
    "\1\0\1\114\76\0\2\115\2\0\112\115\17\0\1\362"+
    "\115\0\1\35\4\0\3\35\1\363\26\35\3\0\33\35"+
    "\21\0\1\35\4\0\10\35\1\364\12\35\1\365\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\3\35\1\366\26\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\367\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\6\35\1\363\23\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\20\35"+
    "\1\370\12\35\21\0\1\35\4\0\23\35\1\371\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\372\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\13\35\1\373\6\35"+
    "\1\374\7\35\3\0\33\35\21\0\1\35\4\0\4\35"+
    "\1\375\25\35\3\0\33\35\21\0\1\35\4\0\22\35"+
    "\1\376\7\35\3\0\33\35\21\0\1\35\4\0\17\35"+
    "\1\377\12\35\3\0\33\35\21\0\1\35\4\0\14\35"+
    "\1\u0100\7\35\1\u0101\5\35\3\0\33\35\21\0\1\35"+
    "\4\0\4\35\1\u0102\25\35\3\0\33\35\21\0\1\35"+
    "\4\0\32\35\3\0\14\35\1\u0103\16\35\21\0\1\35"+
    "\4\0\23\35\1\u0104\6\35\3\0\33\35\21\0\1\35"+
    "\4\0\2\35\1\u0105\2\35\1\u0106\5\35\1\u0107\16\35"+
    "\3\0\33\35\21\0\1\35\4\0\25\35\1\u0108\4\35"+
    "\3\0\33\35\21\0\1\35\4\0\16\35\1\u0109\13\35"+
    "\3\0\33\35\21\0\1\35\4\0\16\35\1\230\13\35"+
    "\3\0\33\35\21\0\1\35\4\0\3\35\1\u010a\26\35"+
    "\3\0\33\35\21\0\1\35\4\0\24\35\1\u010b\5\35"+
    "\3\0\33\35\21\0\1\35\4\0\1\u010c\31\35\3\0"+
    "\33\35\21\0\1\35\4\0\2\35\1\u010d\5\35\1\u010e"+
    "\21\35\3\0\33\35\21\0\1\35\4\0\21\35\1\u010f"+
    "\10\35\3\0\33\35\21\0\1\35\4\0\21\35\1\u0110"+
    "\10\35\3\0\33\35\21\0\1\35\4\0\16\35\1\u0111"+
    "\13\35\3\0\33\35\21\0\1\35\4\0\13\35\1\u0112"+
    "\16\35\3\0\33\35\21\0\1\35\4\0\23\35\1\u0113"+
    "\6\35\3\0\33\35\21\0\1\35\4\0\16\35\1\u0114"+
    "\13\35\3\0\33\35\21\0\1\35\4\0\25\35\1\u0115"+
    "\4\35\3\0\33\35\21\0\1\35\4\0\2\35\1\u0116"+
    "\12\35\1\u0117\4\35\1\u0118\1\u0119\6\35\3\0\33\35"+
    "\21\0\1\35\4\0\4\35\1\u011a\25\35\3\0\33\35"+
    "\21\0\1\35\4\0\15\35\1\u011b\14\35\3\0\33\35"+
    "\21\0\1\35\4\0\32\35\3\0\20\35\1\u011c\12\35"+
    "\21\0\1\35\4\0\4\35\1\u011d\25\35\3\0\33\35"+
    "\21\0\1\35\4\0\4\35\1\u011e\25\35\3\0\33\35"+
    "\21\0\1\35\4\0\17\35\1\u011f\12\35\3\0\33\35"+
    "\21\0\1\35\4\0\4\35\1\u0120\25\35\3\0\33\35"+
    "\21\0\1\35\4\0\10\35\1\u0121\21\35\3\0\33\35"+
    "\21\0\1\35\4\0\5\35\1\u0122\24\35\3\0\33\35"+
    "\21\0\1\35\4\0\12\35\1\u0123\1\35\1\u0124\15\35"+
    "\3\0\33\35\21\0\1\35\4\0\27\35\1\363\2\35"+
    "\3\0\33\35\21\0\1\35\4\0\15\35\1\363\14\35"+
    "\3\0\33\35\21\0\1\35\4\0\25\35\1\u0125\4\35"+
    "\3\0\33\35\21\0\1\35\4\0\13\35\1\363\16\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\22\35"+
    "\1\u0126\10\35\21\0\1\35\4\0\1\150\31\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\366\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\13\35\1\u0127\16\35\3\0"+
    "\33\35\21\0\1\35\4\0\5\35\1\u0128\24\35\3\0"+
    "\33\35\21\0\1\35\4\0\3\35\1\u0129\26\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u012a"+
    "\25\35\21\0\1\35\4\0\17\35\1\u012b\12\35\3\0"+
    "\33\35\21\0\1\35\4\0\10\35\1\u012c\21\35\3\0"+
    "\33\35\21\0\1\35\4\0\22\35\1\u012d\7\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\23\35\1\u012e"+
    "\7\35\21\0\1\35\4\0\32\35\3\0\17\35\1\u012f"+
    "\13\35\21\0\1\35\4\0\22\35\1\u0130\1\u0131\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\6\35\1\u0132\23\35"+
    "\3\0\33\35\21\0\1\35\4\0\13\35\1\u0133\16\35"+
    "\3\0\33\35\21\0\1\35\4\0\25\35\1\u0134\4\35"+
    "\3\0\33\35\21\0\1\35\4\0\6\35\1\u0135\4\35"+
    "\1\u0136\7\35\1\u0137\6\35\3\0\33\35\21\0\1\35"+
    "\4\0\13\35\1\u0138\5\35\1\u0139\10\35\3\0\33\35"+
    "\21\0\1\35\4\0\1\35\1\363\12\35\1\363\15\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\1\35"+
    "\1\u013a\31\35\21\0\1\35\4\0\30\35\1\127\1\35"+
    "\3\0\33\35\21\0\1\35\4\0\1\u013b\7\35\1\u013c"+
    "\13\35\1\u013d\5\35\3\0\33\35\21\0\1\35\4\0"+
    "\10\35\1\u013e\21\35\3\0\33\35\21\0\1\35\4\0"+
    "\3\35\1\u013f\26\35\3\0\33\35\21\0\1\35\4\0"+
    "\4\35\1\u0140\25\35\3\0\33\35\21\0\1\35\4\0"+
    "\21\35\1\u0141\10\35\3\0\33\35\21\0\1\35\4\0"+
    "\21\35\1\366\10\35\3\0\33\35\21\0\1\35\4\0"+
    "\17\35\1\u0142\12\35\3\0\33\35\21\0\1\35\4\0"+
    "\32\35\3\0\23\35\1\u0143\7\35\21\0\1\35\4\0"+
    "\32\35\3\0\21\35\1\u0144\11\35\21\0\1\35\4\0"+
    "\32\35\3\0\4\35\1\u0145\26\35\21\0\1\35\4\0"+
    "\32\35\3\0\14\35\1\u0146\16\35\21\0\1\35\4\0"+
    "\32\35\3\0\23\35\1\u0147\5\35\1\u0148\1\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u0149\26\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u014a\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\3\35\1\u014b\27\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u014c\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\17\35\1\u014d\4\35\1\u014e"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u014f"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u0150"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\14\35\1\u0151"+
    "\6\35\1\u0152\1\u0153\6\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\352\31\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\u0154\3\35\1\u0155\11\35\1\u0156\13\35"+
    "\21\0\1\35\4\0\32\35\3\0\14\35\1\u0103\1\u0157"+
    "\1\u0158\1\35\1\u0159\2\35\1\363\7\35\21\0\1\35"+
    "\4\0\32\35\3\0\3\35\1\u015a\2\35\1\u015b\5\35"+
    "\1\u015c\16\35\21\0\1\35\4\0\32\35\3\0\25\35"+
    "\1\u015d\5\35\21\0\1\35\4\0\32\35\3\0\20\35"+
    "\1\u015e\12\35\21\0\1\35\4\0\32\35\3\0\11\35"+
    "\1\u015f\11\35\1\u0160\7\35\21\0\1\35\4\0\32\35"+
    "\3\0\20\35\1\u0161\12\35\21\0\1\35\4\0\32\35"+
    "\3\0\3\35\1\u0162\21\35\1\u0163\5\35\21\0\1\35"+
    "\4\0\32\35\3\0\1\35\1\u0164\31\35\21\0\1\35"+
    "\4\0\32\35\3\0\3\35\1\u0165\14\35\1\u0166\3\35"+
    "\1\u0167\6\35\21\0\1\35\4\0\32\35\3\0\16\35"+
    "\1\u0168\11\35\1\u0169\2\35\21\0\1\35\4\0\32\35"+
    "\3\0\17\35\1\u016a\13\35\21\0\1\35\4\0\32\35"+
    "\3\0\22\35\1\u016b\10\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\u016c\31\35\21\0\1\35\4\0\32\35"+
    "\3\0\16\35\1\u016d\14\35\21\0\1\35\4\0\32\35"+
    "\3\0\24\35\1\u0113\6\35\21\0\1\35\4\0\32\35"+
    "\3\0\24\35\1\u016e\6\35\21\0\1\35\4\0\32\35"+
    "\3\0\11\35\1\u016f\21\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\u0170\31\35\21\0\1\35\4\0\32\35"+
    "\3\0\23\35\1\u0171\7\35\21\0\1\35\4\0\32\35"+
    "\3\0\1\35\1\u0172\7\35\1\u0173\21\35\21\0\1\35"+
    "\4\0\32\35\3\0\20\35\1\u0174\12\35\21\0\1\35"+
    "\4\0\32\35\3\0\11\35\1\u0175\6\35\1\u011c\2\35"+
    "\1\u0176\1\u0177\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\15\35\1\u0178\15\35\21\0\1\35\4\0\32\35\3\0"+
    "\6\35\1\u0179\15\35\1\u014c\6\35\21\0\1\35\4\0"+
    "\32\35\3\0\7\35\1\363\6\35\1\u017a\1\u017b\13\35"+
    "\21\0\1\35\4\0\32\35\3\0\11\35\1\u017c\6\35"+
    "\1\u017d\1\35\1\u017e\1\35\1\u017f\3\35\1\u0180\2\35"+
    "\21\0\1\35\4\0\32\35\3\0\22\35\1\u0126\1\35"+
    "\1\u0181\6\35\21\0\1\35\4\0\32\35\3\0\16\35"+
    "\1\u0182\11\35\1\u0183\2\35\21\0\1\35\4\0\32\35"+
    "\3\0\4\35\1\u0184\21\35\1\u0185\4\35\21\0\1\35"+
    "\4\0\32\35\3\0\24\35\1\u0186\6\35\21\0\1\35"+
    "\4\0\32\35\3\0\10\35\1\250\22\35\21\0\1\35"+
    "\4\0\32\35\3\0\27\35\1\u0187\3\35\21\0\1\35"+
    "\4\0\32\35\3\0\14\35\1\u0188\16\35\21\0\1\35"+
    "\4\0\32\35\3\0\12\35\1\u0189\20\35\21\0\1\35"+
    "\4\0\32\35\3\0\10\35\1\u018a\22\35\21\0\1\35"+
    "\4\0\32\35\3\0\5\35\1\u018b\25\35\21\0\1\35"+
    "\4\0\32\35\3\0\3\35\1\u018c\1\u018d\15\35\1\u018e"+
    "\1\u018f\7\35\21\0\1\35\4\0\32\35\3\0\22\35"+
    "\1\u0190\10\35\21\0\1\35\4\0\32\35\3\0\30\35"+
    "\1\u0191\2\35\21\0\1\35\4\0\32\35\3\0\22\35"+
    "\1\u0192\1\u012e\7\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u0193\5\35\1\u0194\13\35\21\0\1\35\4\0"+
    "\32\35\3\0\2\35\1\u0195\20\35\1\u0196\7\35\21\0"+
    "\1\35\4\0\32\35\3\0\15\35\1\u0197\15\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u0198\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u0199\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u019a\4\35\1\u019b"+
    "\5\35\1\u019c\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\7\35\1\u019d\23\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u019e\16\35\21\0\1\35\4\0\32\35\3\0"+
    "\1\35\1\u013a\12\35\1\u019f\7\35\1\u0137\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\16\35\1\363\13\35\1\u01a0"+
    "\21\0\1\35\4\0\32\35\3\0\15\35\1\u01a1\15\35"+
    "\21\0\1\35\4\0\32\35\3\0\1\35\1\u01a2\15\35"+
    "\1\u01a3\2\35\1\u01a4\10\35\21\0\1\35\4\0\32\35"+
    "\3\0\20\35\1\u01a5\12\35\21\0\1\35\4\0\32\35"+
    "\3\0\11\35\1\u01a6\21\35\21\0\1\35\4\0\32\35"+
    "\3\0\16\35\1\u01a7\14\35\21\0\1\35\4\0\32\35"+
    "\3\0\16\35\1\363\14\35\21\0\1\35\4\0\32\35"+
    "\3\0\11\35\1\u01a8\10\35\1\u01a9\10\35\21\0\1\35"+
    "\4\0\32\35\3\0\20\35\1\u01aa\12\35\21\0\1\35"+
    "\4\0\32\35\3\0\1\35\1\u01ab\27\35\1\u01ac\1\35"+
    "\21\0\1\35\4\0\32\35\3\0\22\35\1\u0192\10\35"+
    "\21\0\1\35\4\0\32\35\3\0\4\35\1\u01ad\16\35"+
    "\1\u01ae\7\35\21\0\1\35\4\0\32\35\3\0\4\35"+
    "\1\u01af\26\35\21\0\1\35\4\0\32\35\3\0\22\35"+
    "\1\u014c\10\35\21\0\1\35\4\0\32\35\3\0\22\35"+
    "\1\u01b0\1\u01b1\7\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u01b2\2\35\1\u01b3\16\35\21\0\1\35\4\0"+
    "\32\35\3\0\11\35\1\u01b4\21\35\21\0\1\35\4\0"+
    "\32\35\3\0\4\35\1\u01b5\17\35\1\u01b6\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u01b7\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\20\35\1\u0142\12\35\21\0"+
    "\1\u01b8\115\0\1\35\4\0\6\35\1\u01b9\23\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01ba\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\16\35\1\u01bb\13\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u01bc"+
    "\25\35\21\0\1\35\4\0\26\35\1\u01bd\3\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u014c\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\13\35\1\u01be\16\35\3\0"+
    "\33\35\21\0\1\35\4\0\2\35\1\u01bf\27\35\3\0"+
    "\33\35\21\0\1\35\4\0\2\35\1\u01c0\27\35\3\0"+
    "\33\35\21\0\1\35\4\0\14\35\1\u01c1\15\35\3\0"+
    "\33\35\21\0\1\35\4\0\15\35\1\u01c2\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\1\u01c3\31\35\3\0\33\35"+
    "\21\0\1\35\4\0\32\35\3\0\17\35\1\u01c4\13\35"+
    "\21\0\1\35\4\0\1\u01c5\31\35\3\0\33\35\21\0"+
    "\1\35\4\0\1\u01c6\31\35\3\0\33\35\21\0\1\35"+
    "\4\0\4\35\1\u01c7\25\35\3\0\33\35\21\0\1\35"+
    "\4\0\17\35\1\u01c8\12\35\3\0\33\35\21\0\1\35"+
    "\4\0\10\35\1\u01c9\11\35\1\u01ca\7\35\3\0\33\35"+
    "\21\0\1\35\4\0\10\35\1\u01cb\21\35\3\0\33\35"+
    "\21\0\1\35\4\0\13\35\1\u01cc\16\35\3\0\33\35"+
    "\21\0\1\35\4\0\4\35\1\u01cd\25\35\3\0\33\35"+
    "\21\0\1\35\4\0\22\35\1\u01ce\1\u01cf\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01d0\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\14\35\1\u01d1\15\35\3\0"+
    "\33\35\21\0\1\35\4\0\13\35\1\u01d2\16\35\3\0"+
    "\33\35\21\0\1\35\4\0\24\35\1\u01d3\5\35\3\0"+
    "\33\35\21\0\1\35\4\0\10\35\1\u01d4\21\35\3\0"+
    "\33\35\21\0\1\35\4\0\13\35\1\u01d5\16\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01d6\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01d7\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01d8\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\u01d9\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\24\35\1\u01da\5\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\25\35\1\u01db"+
    "\5\35\21\0\1\35\4\0\15\35\1\u01dc\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\u01d2\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01dd\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\10\35\1\u01de\21\35\3\0"+
    "\33\35\21\0\1\35\4\0\22\35\1\u01df\7\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\7\35\1\u01e0"+
    "\23\35\21\0\1\35\4\0\13\35\1\u01e1\16\35\3\0"+
    "\33\35\21\0\1\35\4\0\22\35\1\u01e2\7\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01e3\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u01e4"+
    "\14\35\21\0\1\35\4\0\14\35\1\u01e5\15\35\3\0"+
    "\33\35\21\0\1\35\4\0\7\35\1\u01e6\22\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u01e7"+
    "\21\35\21\0\1\35\4\0\32\35\3\0\7\35\1\u01e8"+
    "\23\35\21\0\1\35\4\0\23\35\1\u01e9\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\7\35\1\u0122\22\35\3\0"+
    "\33\35\21\0\1\35\4\0\13\35\1\u01ea\16\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01eb\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\14\35\1\u01ec\15\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u01ed\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\14\35\1\u01ee"+
    "\16\35\21\0\1\35\4\0\15\35\1\u01ef\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\6\35\1\u01f0\23\35\3\0"+
    "\33\35\21\0\1\35\4\0\15\35\1\u01f1\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\16\35\1\u01f2\13\35\3\0"+
    "\33\35\21\0\1\35\4\0\1\u01f3\31\35\3\0\33\35"+
    "\21\0\1\35\4\0\21\35\1\u01f4\10\35\3\0\33\35"+
    "\21\0\1\35\4\0\3\35\1\u014c\26\35\3\0\33\35"+
    "\21\0\1\35\4\0\32\35\3\0\24\35\1\u01f5\6\35"+
    "\21\0\1\35\4\0\32\35\3\0\25\35\1\u01f6\5\35"+
    "\21\0\1\35\4\0\32\35\3\0\17\35\1\u01f7\13\35"+
    "\21\0\1\35\4\0\32\35\3\0\5\35\1\u01f8\25\35"+
    "\21\0\1\35\4\0\32\35\3\0\16\35\1\u01f9\14\35"+
    "\21\0\1\35\4\0\32\35\3\0\11\35\1\u01fa\21\35"+
    "\21\0\1\35\4\0\32\35\3\0\11\35\1\u01fb\21\35"+
    "\21\0\1\35\4\0\32\35\3\0\13\35\1\u01fc\17\35"+
    "\21\0\1\35\4\0\32\35\3\0\14\35\1\u01fd\16\35"+
    "\21\0\1\35\4\0\32\35\3\0\24\35\1\u01fe\6\35"+
    "\21\0\1\35\4\0\32\35\3\0\1\35\1\u01ff\31\35"+
    "\21\0\1\35\4\0\32\35\3\0\5\35\1\u014c\25\35"+
    "\21\0\1\35\4\0\32\35\3\0\14\35\1\u01be\16\35"+
    "\21\0\1\35\4\0\32\35\3\0\5\35\1\u0200\25\35"+
    "\21\0\1\35\4\0\32\35\3\0\3\35\1\u0201\27\35"+
    "\21\0\1\35\4\0\32\35\3\0\23\35\1\u0202\7\35"+
    "\21\0\1\35\4\0\32\35\3\0\1\35\1\u0203\31\35"+
    "\21\0\1\35\4\0\32\35\3\0\16\35\1\u0204\14\35"+
    "\21\0\1\35\4\0\32\35\3\0\20\35\1\u0205\12\35"+
    "\21\0\1\35\4\0\32\35\3\0\23\35\1\u0206\1\u0207"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\31\35\1\u0208"+
    "\1\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u0209"+
    "\10\35\1\u020a\10\35\21\0\1\35\4\0\32\35\3\0"+
    "\1\35\1\u020b\3\35\1\u020c\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u020d\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\2\35\1\u020e\30\35\21\0\1\35\4\0"+
    "\32\35\3\0\6\35\1\u020f\24\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u0210\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\24\35\1\u0211\6\35\21\0\1\35\4\0"+
    "\32\35\3\0\22\35\1\u020a\10\35\21\0\1\35\4\0"+
    "\32\35\3\0\15\35\1\u014c\15\35\21\0\1\35\4\0"+
    "\32\35\3\0\14\35\1\u01cc\16\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u0212\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\17\35\1\u0213\13\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u0214\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\1\35\1\u0215\31\35\21\0\1\35\4\0"+
    "\32\35\3\0\24\35\1\u0216\6\35\21\0\1\35\4\0"+
    "\32\35\3\0\1\35\1\243\31\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u0217\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\15\35\1\u0218\15\35\21\0\1\35\4\0"+
    "\32\35\3\0\3\35\1\u0219\27\35\21\0\1\35\4\0"+
    "\32\35\3\0\17\35\1\u011f\13\35\21\0\1\35\4\0"+
    "\32\35\3\0\17\35\1\u0197\13\35\21\0\1\35\4\0"+
    "\32\35\3\0\20\35\1\u021a\12\35\21\0\1\35\4\0"+
    "\32\35\3\0\10\35\1\u021b\22\35\21\0\1\35\4\0"+
    "\32\35\3\0\20\35\1\u021c\12\35\21\0\1\35\4\0"+
    "\32\35\3\0\7\35\1\u021d\23\35\21\0\1\35\4\0"+
    "\32\35\3\0\14\35\1\u021e\2\35\1\u021f\13\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u01c5\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u0220\16\35\1\u0221"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u0222"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\2\35\1\u0223"+
    "\30\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u0224"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\7\35\1\u014c"+
    "\23\35\21\0\1\35\4\0\32\35\3\0\20\35\1\u0225"+
    "\12\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u0226"+
    "\14\35\21\0\1\35\4\0\32\35\3\0\7\35\1\u0227"+
    "\23\35\21\0\1\35\4\0\32\35\3\0\3\35\1\u0228"+
    "\27\35\16\0\1\u0229\2\0\1\35\4\0\32\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\10\35\1\u022a"+
    "\22\35\16\0\1\u022b\2\0\1\35\4\0\32\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u022c"+
    "\21\35\21\0\1\35\4\0\32\35\3\0\25\35\1\u022d"+
    "\5\35\21\0\1\35\4\0\32\35\3\0\14\35\1\u01e1"+
    "\16\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u022e"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u022f"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\22\35\1\u0230"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\13\35\1\u0231"+
    "\17\35\21\0\1\35\4\0\32\35\3\0\4\35\1\u0232"+
    "\26\35\21\0\1\35\4\0\32\35\3\0\6\35\1\u0233"+
    "\24\35\21\0\1\35\4\0\32\35\3\0\23\35\1\u0234"+
    "\7\35\21\0\1\35\4\0\32\35\3\0\23\35\1\u0235"+
    "\7\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u0236"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u0197"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\15\35\1\u0237"+
    "\1\u0238\7\35\1\u0239\4\35\21\0\1\35\4\0\32\35"+
    "\3\0\24\35\1\u023a\6\35\21\0\1\35\4\0\32\35"+
    "\3\0\14\35\1\u023b\16\35\21\0\1\35\4\0\32\35"+
    "\3\0\10\35\1\u01e6\22\35\21\0\1\35\4\0\32\35"+
    "\3\0\25\35\1\u023c\5\35\21\0\1\35\4\0\32\35"+
    "\3\0\23\35\1\u023d\7\35\21\0\1\35\4\0\32\35"+
    "\3\0\6\35\1\u023e\24\35\21\0\1\35\4\0\32\35"+
    "\3\0\4\35\1\u023f\26\35\21\0\1\35\4\0\32\35"+
    "\3\0\25\35\1\u0240\5\35\21\0\1\35\4\0\32\35"+
    "\3\0\10\35\1\u0241\22\35\21\0\1\35\4\0\32\35"+
    "\3\0\24\35\1\u021b\6\35\21\0\1\35\4\0\32\35"+
    "\3\0\6\35\1\u0242\24\35\21\0\1\35\4\0\32\35"+
    "\3\0\5\35\1\u0243\25\35\21\0\1\35\4\0\32\35"+
    "\3\0\4\35\1\u0244\26\35\21\0\1\35\4\0\32\35"+
    "\3\0\3\35\1\u0245\20\35\1\u023b\6\35\21\0\1\35"+
    "\4\0\32\35\3\0\20\35\1\u01cf\12\35\21\0\1\35"+
    "\4\0\32\35\3\0\11\35\1\u0246\13\35\1\u0247\5\35"+
    "\21\0\1\35\4\0\32\35\3\0\5\35\1\u0248\25\35"+
    "\21\0\1\35\4\0\32\35\3\0\24\35\1\u0249\6\35"+
    "\21\0\1\35\4\0\32\35\3\0\3\35\1\u024a\27\35"+
    "\21\0\1\35\4\0\32\35\3\0\23\35\1\u01d1\7\35"+
    "\21\0\1\35\4\0\32\35\3\0\17\35\1\u024b\13\35"+
    "\21\0\1\35\4\0\32\35\3\0\11\35\1\u024c\21\35"+
    "\21\0\1\35\4\0\32\35\3\0\5\35\1\u024d\25\35"+
    "\21\0\1\35\4\0\32\35\3\0\1\35\1\u024e\7\35"+
    "\1\u024f\21\35\21\0\1\35\4\0\32\35\3\0\1\35"+
    "\1\u0250\31\35\21\0\1\35\4\0\32\35\3\0\24\35"+
    "\1\u0251\6\35\21\0\1\35\4\0\32\35\3\0\11\35"+
    "\1\u0252\21\35\21\0\1\35\4\0\32\35\3\0\4\35"+
    "\1\u0253\26\35\21\0\1\35\4\0\32\35\3\0\1\35"+
    "\1\u0254\31\35\21\0\1\35\4\0\32\35\3\0\14\35"+
    "\1\u0255\16\35\21\0\1\35\4\0\32\35\3\0\24\35"+
    "\1\u0256\6\35\21\0\1\35\4\0\32\35\3\0\10\35"+
    "\1\u015e\22\35\21\0\1\35\4\0\32\35\3\0\14\35"+
    "\1\u0257\16\35\21\0\1\35\4\0\15\35\1\u0258\14\35"+
    "\3\0\33\35\21\0\1\35\4\0\21\35\1\u0259\10\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\1\u025a"+
    "\32\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u025b"+
    "\14\35\21\0\1\35\4\0\4\35\1\u025c\25\35\3\0"+
    "\33\35\21\0\1\35\4\0\1\u025d\31\35\3\0\33\35"+
    "\21\0\1\35\4\0\12\35\1\u0259\17\35\3\0\33\35"+
    "\21\0\1\35\4\0\10\35\1\u025e\5\35\1\u025f\13\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\363\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\u0260\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\22\35"+
    "\1\u0261\10\35\21\0\1\35\4\0\24\35\1\u0262\5\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\u0263\6\35"+
    "\3\0\33\35\6\0\1\u0264\12\0\1\35\4\0\32\35"+
    "\3\0\33\35\21\0\1\35\4\0\5\35\1\u0265\24\35"+
    "\3\0\33\35\21\0\1\35\4\0\25\35\1\u0266\4\35"+
    "\3\0\33\35\21\0\1\35\4\0\17\35\1\u0267\12\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\u0268\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\10\35\1\u0269\21\35"+
    "\3\0\33\35\6\0\1\u026a\12\0\1\35\4\0\32\35"+
    "\3\0\33\35\21\0\1\35\4\0\17\35\1\u026b\12\35"+
    "\3\0\33\35\21\0\1\35\4\0\15\35\1\u026c\14\35"+
    "\3\0\33\35\21\0\1\35\4\0\24\35\1\u026d\5\35"+
    "\3\0\33\35\21\0\1\35\4\0\21\35\1\u01d2\10\35"+
    "\3\0\33\35\21\0\1\35\4\0\21\35\1\u026e\10\35"+
    "\3\0\33\35\21\0\1\35\4\0\21\35\1\u026f\10\35"+
    "\3\0\33\35\21\0\1\35\4\0\13\35\1\u0270\16\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\24\35"+
    "\1\u0271\6\35\21\0\1\35\4\0\23\35\1\u0272\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\1\35\1\u0273\24\35"+
    "\1\u0274\3\35\3\0\33\35\21\0\1\35\4\0\32\35"+
    "\3\0\5\35\1\u0275\25\35\21\0\1\35\4\0\4\35"+
    "\1\u0276\25\35\3\0\33\35\21\0\1\35\4\0\21\35"+
    "\1\u0277\10\35\3\0\33\35\21\0\1\35\4\0\1\u0278"+
    "\31\35\3\0\33\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u0279\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\22\35\1\u027a\10\35\21\0\1\35\4\0\21\35\1\u027b"+
    "\10\35\3\0\33\35\21\0\1\35\4\0\1\35\1\u027c"+
    "\30\35\3\0\33\35\21\0\1\35\4\0\17\35\1\u027d"+
    "\12\35\3\0\33\35\21\0\1\35\4\0\4\35\1\u027e"+
    "\25\35\3\0\33\35\21\0\1\35\4\0\2\35\1\u027f"+
    "\27\35\3\0\33\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0280\25\35\21\0\1\35\4\0\22\35\1\u0281"+
    "\7\35\3\0\33\35\21\0\1\35\4\0\6\35\1\u0282"+
    "\23\35\3\0\33\35\21\0\1\35\4\0\2\35\1\u0283"+
    "\27\35\3\0\33\35\21\0\1\35\4\0\15\35\1\u0284"+
    "\14\35\3\0\33\35\21\0\1\35\4\0\23\35\1\u0285"+
    "\6\35\3\0\33\35\21\0\1\35\4\0\4\35\1\u0286"+
    "\25\35\3\0\33\35\21\0\1\35\4\0\32\35\3\0"+
    "\22\35\1\u0287\10\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u0288\21\35\21\0\1\35\4\0\32\35\3\0"+
    "\3\35\1\u0289\27\35\21\0\1\35\4\0\32\35\3\0"+
    "\22\35\1\u028a\10\35\21\0\1\35\4\0\32\35\3\0"+
    "\3\35\1\u028b\27\35\21\0\1\35\4\0\32\35\3\0"+
    "\17\35\1\u028c\13\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u01cf\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\7\35\1\u028d\23\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u028e\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\17\35\1\u028f\13\35\21\0\1\35\4\0\32\35\3\0"+
    "\13\35\1\u01cf\17\35\21\0\1\35\4\0\32\35\3\0"+
    "\10\35\1\u0290\22\35\21\0\1\35\4\0\32\35\3\0"+
    "\23\35\1\u0291\7\35\21\0\1\35\4\0\32\35\3\0"+
    "\22\35\1\376\10\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0292\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u0293\16\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u0294\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u0295\21\35\21\0\1\35\4\0\32\35\3\0"+
    "\15\35\1\u0296\15\35\21\0\1\35\4\0\32\35\3\0"+
    "\31\35\1\u0297\1\35\21\0\1\35\4\0\32\35\3\0"+
    "\25\35\1\u0298\5\35\21\0\1\35\4\0\32\35\3\0"+
    "\22\35\1\u0299\10\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u029a\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u0150\16\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u015f\21\35\21\0\1\35\4\0\32\35\3\0"+
    "\31\35\1\u029b\1\35\21\0\1\35\4\0\32\35\3\0"+
    "\20\35\1\u029c\12\35\21\0\1\35\4\0\32\35\3\0"+
    "\22\35\1\u029d\10\35\21\0\1\35\4\0\32\35\3\0"+
    "\16\35\1\u029e\3\35\1\u029f\10\35\21\0\1\35\4\0"+
    "\32\35\3\0\14\35\1\u02a0\16\35\21\0\1\35\4\0"+
    "\32\35\3\0\25\35\1\u02a1\5\35\21\0\1\35\4\0"+
    "\32\35\3\0\11\35\1\u02a2\21\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u028c\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\24\35\1\u02a3\6\35\21\0\1\35\4\0"+
    "\32\35\3\0\10\35\1\u021c\22\35\21\0\1\35\4\0"+
    "\32\35\3\0\10\35\1\u02a4\22\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u02a5\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\22\35\1\u02a6\10\35\21\0\1\35\4\0"+
    "\32\35\3\0\22\35\1\u02a7\10\35\21\0\1\35\4\0"+
    "\32\35\3\0\1\35\1\u02a8\31\35\21\0\1\35\4\0"+
    "\32\35\3\0\22\35\1\u02a9\10\35\21\0\1\35\4\0"+
    "\32\35\3\0\4\35\1\u02aa\26\35\21\0\1\35\4\0"+
    "\32\35\3\0\11\35\1\u02ab\21\35\21\0\1\35\4\0"+
    "\32\35\3\0\10\35\1\u02ac\22\35\73\0\1\u02ad\16\0"+
    "\1\u02ae\24\0\1\35\4\0\32\35\3\0\17\35\1\u02af"+
    "\13\35\73\0\1\u02b0\16\0\1\u02b1\24\0\1\35\4\0"+
    "\32\35\3\0\16\35\1\u02b2\14\35\21\0\1\35\4\0"+
    "\32\35\3\0\14\35\1\u02b3\16\35\21\0\1\35\4\0"+
    "\32\35\3\0\3\35\1\243\27\35\21\0\1\35\4\0"+
    "\32\35\3\0\22\35\1\u02b4\10\35\21\0\1\35\4\0"+
    "\32\35\3\0\6\35\1\u02b5\13\35\1\u02b6\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u02b7\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u02b8\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\17\35\1\u02b9\13\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u02ba\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\14\35\1\u028c\16\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u02bb\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02bc\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u02bd\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u02be\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u02bf\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u021c\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u02c0\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u02c1\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u02c2\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\22\35\1\u02c3\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02c4\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\17\35\1\u02c5\13\35\21\0"+
    "\1\35\4\0\32\35\3\0\13\35\1\u021c\17\35\21\0"+
    "\1\35\4\0\32\35\3\0\16\35\1\u017a\14\35\21\0"+
    "\1\35\4\0\32\35\3\0\3\35\1\u02c6\27\35\21\0"+
    "\1\35\4\0\32\35\3\0\22\35\1\u02b2\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\3\35\1\u02c7\27\35\21\0"+
    "\1\35\4\0\32\35\3\0\10\35\1\u02c8\22\35\21\0"+
    "\1\35\4\0\32\35\3\0\27\35\1\u01ac\3\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02c9\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\6\35\1\u02ca\24\35\21\0"+
    "\1\35\4\0\32\35\3\0\6\35\1\u02cb\24\35\21\0"+
    "\1\35\4\0\32\35\3\0\7\35\1\u02cc\23\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02cd\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\25\35\1\u02ce\5\35\21\0"+
    "\1\35\4\0\32\35\3\0\2\35\1\u02cf\30\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02d0\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u02d1\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\10\35\1\u02d2\22\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u02d3\26\35\21\0"+
    "\1\35\4\0\10\35\1\u02d4\21\35\3\0\33\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u02d5\26\35\21\0"+
    "\1\35\4\0\4\35\1\u02d6\25\35\3\0\33\35\21\0"+
    "\1\35\4\0\3\35\1\u02d7\26\35\3\0\33\35\21\0"+
    "\1\35\4\0\23\35\1\u02d8\6\35\3\0\33\35\21\0"+
    "\1\35\4\0\15\35\1\u02d9\14\35\3\0\33\35\21\0"+
    "\1\35\4\0\4\35\1\u02da\25\35\3\0\33\35\21\0"+
    "\1\35\4\0\13\35\1\u02db\16\35\3\0\33\35\21\0"+
    "\1\35\4\0\4\35\1\u02dc\25\35\3\0\33\35\36\0"+
    "\1\u02dd\100\0\1\35\4\0\1\u02de\31\35\3\0\33\35"+
    "\21\0\1\35\4\0\23\35\1\u02c0\6\35\3\0\33\35"+
    "\21\0\1\35\4\0\22\35\1\u029b\7\35\3\0\33\35"+
    "\21\0\1\35\4\0\6\35\1\u02df\23\35\3\0\33\35"+
    "\37\0\1\u02e0\64\0\1\u02e1\12\0\1\35\4\0\32\35"+
    "\3\0\33\35\21\0\1\35\4\0\6\35\1\u02e2\23\35"+
    "\3\0\33\35\21\0\1\35\4\0\3\35\1\u02e3\26\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\u02e4\6\35"+
    "\3\0\33\35\21\0\1\35\4\0\22\35\1\u02e5\7\35"+
    "\3\0\33\35\21\0\1\35\4\0\13\35\1\u029b\16\35"+
    "\3\0\33\35\21\0\1\35\4\0\23\35\1\u02e6\6\35"+
    "\3\0\33\35\6\0\1\u02e7\12\0\1\35\4\0\32\35"+
    "\3\0\33\35\21\0\1\35\4\0\21\35\1\u02e8\10\35"+
    "\3\0\33\35\21\0\1\35\4\0\32\35\3\0\11\35"+
    "\1\u02e9\21\35\21\0\1\35\4\0\32\35\3\0\1\35"+
    "\1\u02ea\31\35\21\0\1\35\4\0\10\35\1\u02eb\21\35"+
    "\3\0\33\35\21\0\1\35\4\0\1\u02ec\31\35\3\0"+
    "\33\35\21\0\1\35\4\0\16\35\1\u02ed\13\35\3\0"+
    "\33\35\21\0\1\35\4\0\15\35\1\u02ee\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\u02ef\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\4\35\1\u02f0"+
    "\26\35\21\0\1\35\4\0\1\u02f1\31\35\3\0\33\35"+
    "\21\0\1\35\4\0\4\35\1\u02f2\25\35\3\0\33\35"+
    "\21\0\1\35\4\0\1\u02f3\31\35\3\0\33\35\6\0"+
    "\1\u02f4\12\0\1\35\4\0\32\35\3\0\33\35\21\0"+
    "\1\35\4\0\4\35\1\u02f5\25\35\3\0\33\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u02f6\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\22\35\1\u02f7\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u02f8\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02f9\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\22\35\1\u02fa\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u02fb\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\15\35\1\u02fc\15\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u02fd\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\22\35\1\u02fe\10\35\21\0"+
    "\1\35\4\0\32\35\3\0\16\35\1\u02ff\14\35\21\0"+
    "\1\35\4\0\32\35\3\0\1\35\1\u0300\31\35\21\0"+
    "\1\35\4\0\32\35\3\0\20\35\1\u019e\12\35\21\0"+
    "\1\35\4\0\32\35\3\0\14\35\1\u0301\16\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u02dc\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u02c0\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u0302\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u0303\16\35\1\u0304"+
    "\7\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u0305"+
    "\14\35\21\0\1\35\4\0\32\35\3\0\14\35\1\u0306"+
    "\16\35\21\0\1\35\4\0\32\35\3\0\22\35\1\u0307"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\7\35\1\u0308"+
    "\23\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u0309"+
    "\21\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u030a"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\15\35\1\u030b"+
    "\15\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u030c"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u02e4"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u030d"+
    "\14\35\21\0\1\35\4\0\32\35\3\0\6\35\1\u030e"+
    "\24\35\21\0\1\35\4\0\32\35\3\0\1\35\1\363"+
    "\31\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u030f"+
    "\14\35\70\0\1\u0310\121\0\1\u0311\42\0\1\35\4\0"+
    "\32\35\3\0\4\35\1\u0312\26\35\70\0\1\u0313\121\0"+
    "\1\u0314\42\0\1\35\4\0\32\35\3\0\5\35\1\u0315"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\27\35\1\u0316"+
    "\3\35\21\0\1\35\4\0\32\35\3\0\14\35\1\u0317"+
    "\16\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u0318"+
    "\21\35\21\0\1\35\4\0\32\35\3\0\7\35\1\u0319"+
    "\23\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u031a"+
    "\14\35\21\0\1\35\4\0\32\35\3\0\22\35\1\u0225"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\23\35\1\u031b"+
    "\7\35\21\0\1\35\4\0\32\35\3\0\22\35\1\u031c"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u031d"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\3\35\1\u031e"+
    "\27\35\21\0\1\35\4\0\32\35\3\0\3\35\1\u0186"+
    "\27\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u031f"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\22\35\1\u028c"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u0320"+
    "\14\35\21\0\1\35\4\0\32\35\3\0\6\35\1\u0321"+
    "\24\35\21\0\1\35\4\0\32\35\3\0\24\35\1\u0322"+
    "\6\35\21\0\1\35\4\0\32\35\3\0\10\35\1\u029b"+
    "\22\35\21\0\1\35\4\0\32\35\3\0\22\35\1\u0323"+
    "\10\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u0324"+
    "\21\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u02d9"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\16\35\1\u0325"+
    "\14\35\21\0\1\35\4\0\32\35\3\0\5\35\1\u02f5"+
    "\25\35\21\0\1\35\4\0\32\35\3\0\1\35\1\u0326"+
    "\31\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u0327"+
    "\21\35\21\0\1\35\4\0\32\35\3\0\11\35\1\u0328"+
    "\21\35\21\0\1\35\4\0\15\35\1\u0329\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\15\35\1\u032a\14\35\3\0"+
    "\33\35\21\0\1\35\4\0\4\35\1\u032b\25\35\3\0"+
    "\33\35\6\0\1\u032c\12\0\1\35\4\0\32\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\u032d\6\35\3\0"+
    "\33\35\43\0\1\u032e\73\0\1\35\4\0\13\35\1\u032f"+
    "\16\35\3\0\33\35\21\0\1\35\4\0\15\35\1\u0330"+
    "\14\35\3\0\33\35\44\0\1\u0331\100\0\1\u0332\107\0"+
    "\1\35\4\0\4\35\1\u0333\25\35\3\0\33\35\21\0"+
    "\1\35\4\0\4\35\1\u0334\25\35\3\0\33\35\27\0"+
    "\1\u0335\107\0\1\35\4\0\30\35\1\u0336\1\35\3\0"+
    "\33\35\21\0\1\35\4\0\32\35\3\0\17\35\1\u0337"+
    "\13\35\21\0\1\35\4\0\32\35\3\0\15\35\1\u0338"+
    "\15\35\21\0\1\35\4\0\2\35\1\u01de\27\35\3\0"+
    "\33\35\21\0\1\35\4\0\2\35\1\u0339\27\35\3\0"+
    "\33\35\21\0\1\35\4\0\10\35\1\u033a\21\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\u033b\6\35\3\0"+
    "\33\35\21\0\1\35\4\0\2\35\1\u033c\27\35\3\0"+
    "\33\35\21\0\1\35\4\0\21\35\1\u033d\10\35\3\0"+
    "\33\35\21\0\1\35\4\0\23\35\1\u033e\6\35\3\0"+
    "\33\35\26\0\1\u033f\110\0\1\35\4\0\32\35\3\0"+
    "\3\35\1\u0340\27\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0299\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\17\35\1\u0341\13\35\21\0\1\35\4\0\32\35\3\0"+
    "\16\35\1\u014c\14\35\21\0\1\35\4\0\32\35\3\0"+
    "\30\35\1\u014c\2\35\21\0\1\35\4\0\32\35\3\0"+
    "\25\35\1\u0342\5\35\21\0\1\35\4\0\32\35\3\0"+
    "\25\35\1\u0343\5\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u014c\16\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u032d\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\23\35\1\u02b2\7\35\21\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u0344\21\35\21\0\1\35\4\0\32\35\3\0"+
    "\31\35\1\u02c0\1\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u02f9\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\16\35\1\u0345\14\35\21\0\1\35\4\0\32\35\3\0"+
    "\17\35\1\u0346\13\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0347\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\3\35\1\u0348\27\35\21\0\1\35\4\0\32\35\3\0"+
    "\1\35\1\u0349\31\35\74\0\1\u034a\110\0\1\u034b\122\0"+
    "\1\u034c\110\0\1\u034d\47\0\1\35\4\0\32\35\3\0"+
    "\11\35\1\u034e\21\35\21\0\1\35\4\0\32\35\3\0"+
    "\17\35\1\u034f\13\35\21\0\1\35\4\0\32\35\3\0"+
    "\4\35\1\u031d\26\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0350\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\7\35\1\u0351\23\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u0352\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\31\35\1\u0353\1\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0186\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u02c1\6\35\21\0\1\35\4\0\32\35\3\0"+
    "\4\35\1\u0186\26\35\21\0\1\35\4\0\32\35\3\0"+
    "\17\35\1\u0354\13\35\21\0\1\35\4\0\32\35\3\0"+
    "\16\35\1\u0355\14\35\21\0\1\35\4\0\32\35\3\0"+
    "\5\35\1\u0356\25\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u0186\16\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u0357\16\35\21\0\1\35\4\0\32\35\3\0"+
    "\14\35\1\u0358\16\35\21\0\1\35\4\0\2\35\1\u0359"+
    "\27\35\3\0\33\35\51\0\1\u035a\75\0\1\u035b\105\0"+
    "\1\35\4\0\4\35\1\u035c\25\35\3\0\33\35\6\0"+
    "\1\u035d\12\0\1\35\4\0\32\35\3\0\33\35\36\0"+
    "\1\u035e\135\0\1\u035f\60\0\1\35\4\0\2\35\1\u0360"+
    "\27\35\3\0\33\35\56\0\1\u0361\45\0\1\u0362\12\0"+
    "\1\35\4\0\32\35\3\0\33\35\21\0\1\35\4\0"+
    "\32\35\3\0\16\35\1\u0363\14\35\21\0\1\35\4\0"+
    "\12\35\1\u02d8\17\35\3\0\33\35\21\0\1\35\4\0"+
    "\15\35\1\u025e\14\35\3\0\33\35\21\0\1\35\4\0"+
    "\23\35\1\u0364\6\35\3\0\33\35\21\0\1\35\4\0"+
    "\4\35\1\u0365\25\35\3\0\33\35\41\0\1\u0366\75\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u0242\6\35\21\0"+
    "\1\35\4\0\32\35\3\0\25\35\1\u0367\5\35\21\0"+
    "\1\35\4\0\32\35\3\0\3\35\1\u0368\27\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u0369\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\17\35\1\u022c\13\35\6\0"+
    "\1\u036a\12\0\1\35\4\0\32\35\3\0\33\35\21\0"+
    "\1\35\4\0\32\35\3\0\16\35\1\265\14\35\21\0"+
    "\1\35\4\0\32\35\3\0\16\35\1\u036b\14\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u036c\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\3\35\1\u036d\27\35\72\0"+
    "\1\u036e\132\0\1\u036f\100\0\1\u0370\132\0\1\u0371\27\0"+
    "\1\35\4\0\32\35\3\0\23\35\1\u0372\7\35\21\0"+
    "\1\35\4\0\32\35\3\0\27\35\1\u0373\3\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u0374\25\35\6\0"+
    "\1\u0375\12\0\1\35\4\0\32\35\3\0\33\35\21\0"+
    "\1\35\4\0\32\35\3\0\16\35\1\u0376\14\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u0377\25\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u014c\26\35\21\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u0378\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\5\35\1\u0379\25\35\21\0"+
    "\1\35\4\0\21\35\1\u037a\10\35\3\0\33\35\26\0"+
    "\1\u037b\121\0\1\u037c\104\0\1\35\4\0\15\35\1\u037d"+
    "\14\35\3\0\33\35\40\0\1\u037e\120\0\1\u037f\73\0"+
    "\1\35\4\0\23\35\1\u0380\6\35\3\0\33\35\40\0"+
    "\1\u0381\76\0\1\35\4\0\10\35\1\u0382\21\35\3\0"+
    "\33\35\41\0\1\u0383\75\0\1\35\4\0\32\35\3\0"+
    "\16\35\1\u0384\14\35\21\0\1\35\4\0\32\35\3\0"+
    "\24\35\1\u0385\6\35\76\0\1\u0386\40\0\1\35\4\0"+
    "\32\35\3\0\24\35\1\u0387\6\35\21\0\1\35\4\0"+
    "\32\35\3\0\17\35\1\u0388\13\35\21\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u0389\25\35\73\0\1\u038a\115\0"+
    "\1\u038b\115\0\1\u038c\115\0\1\u038d\43\0\1\35\4\0"+
    "\32\35\3\0\5\35\1\u038e\25\35\21\0\1\35\4\0"+
    "\32\35\3\0\16\35\1\243\14\35\76\0\1\u038f\40\0"+
    "\1\35\4\0\32\35\3\0\11\35\1\u0390\21\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u01e1\26\35\21\0"+
    "\1\35\4\0\32\35\3\0\24\35\1\u0391\6\35\21\0"+
    "\1\35\4\0\4\35\1\u0392\25\35\3\0\33\35\27\0"+
    "\1\u0393\143\0\1\u0394\61\0\1\35\4\0\2\35\1\u0395"+
    "\27\35\3\0\33\35\32\0\1\u0396\115\0\1\u0397\104\0"+
    "\1\35\4\0\16\35\1\u0398\13\35\3\0\33\35\21\0"+
    "\1\35\4\0\32\35\3\0\4\35\1\u0399\26\35\21\0"+
    "\1\35\4\0\32\35\3\0\17\35\1\u039a\13\35\70\0"+
    "\1\u039b\46\0\1\35\4\0\32\35\3\0\23\35\1\u0389"+
    "\7\35\21\0\1\35\4\0\32\35\3\0\6\35\1\u039c"+
    "\24\35\107\0\1\u039d\115\0\1\u039e\76\0\1\u039f\46\0"+
    "\1\35\4\0\32\35\3\0\32\35\1\u03a0\21\0\1\35"+
    "\4\0\32\35\3\0\31\35\1\u03a1\1\35\21\0\1\35"+
    "\4\0\14\35\1\u03a2\15\35\3\0\33\35\41\0\1\u03a3"+
    "\75\0\1\35\4\0\4\35\1\377\25\35\3\0\33\35"+
    "\56\0\1\u03a4\115\0\1\u03a5\60\0\1\35\4\0\15\35"+
    "\1\u02d8\14\35\3\0\33\35\16\0\1\u03a6\2\0\1\35"+
    "\4\0\32\35\3\0\33\35\21\0\1\35\4\0\32\35"+
    "\3\0\22\35\1\u03a7\10\35\114\0\1\u03a4\115\0\1\u03a5"+
    "\22\0\1\35\4\0\32\35\3\0\5\35\1\u03a8\25\35"+
    "\21\0\1\35\4\0\4\35\1\u03a9\25\35\3\0\33\35"+
    "\32\0\1\u03aa\151\0\1\u03ab\50\0\1\35\4\0\32\35"+
    "\3\0\4\35\1\u0299\26\35\21\0\1\35\4\0\15\35"+
    "\1\u03ac\14\35\3\0\33\35\102\0\1\u03ad\34\0\1\35"+
    "\4\0\23\35\1\u03ae\6\35\3\0\33\35\77\0\1\u03af"+
    "\120\0\1\u03b0\120\0\1\u03b1\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[61542];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\1\1\1\11\1\1\1\11"+
    "\2\1\2\11\32\1\2\11\27\1\2\11\2\1\1\0"+
    "\1\11\1\0\1\11\2\1\1\0\1\11\241\1\1\0"+
    "\u0137\1\1\0\1\1\1\0\70\1\1\0\5\1\1\0"+
    "\102\1\2\0\1\1\2\0\53\1\1\0\2\1\2\0"+
    "\5\1\1\0\14\1\1\0\33\1\2\0\1\1\2\0"+
    "\27\1\1\0\1\1\1\0\2\1\2\0\2\1\1\0"+
    "\11\1\1\0\12\1\4\0\14\1\2\0\1\1\2\0"+
    "\1\11\1\1\1\11\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\4\0\3\1\1\0\5\1\2\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\1\0\3\1"+
    "\1\0\1\11\1\0\1\11\1\1\1\0\3\1\1\0"+
    "\1\11\1\1\2\0\3\1\1\0\1\1\2\11\1\0"+
    "\3\1\1\0\2\11\1\0\3\1\1\11\1\0\1\1"+
    "\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[945];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  codJFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lexeme = yytext(); return Error;
            }
          // fall through
          case 160: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 161: break;
          case 3:
            { lexeme=yytext(); return Caracter_especial;
            }
          // fall through
          case 162: break;
          case 4:
            { lexeme=yytext(); return Comillas;
            }
          // fall through
          case 163: break;
          case 5:
            { lexeme=yytext(); return Parentesis_Izq;
            }
          // fall through
          case 164: break;
          case 6:
            { lexeme=yytext(); return Parentesis_Der;
            }
          // fall through
          case 165: break;
          case 7:
            { lexeme=yytext(); return Coma;
            }
          // fall through
          case 166: break;
          case 8:
            { lexeme=yytext(); return Punto;
            }
          // fall through
          case 167: break;
          case 9:
            { lexeme = yytext();return Numero;
            }
          // fall through
          case 168: break;
          case 10:
            { lexeme=yytext(); return DosPuntos;
            }
          // fall through
          case 169: break;
          case 11:
            { lexeme=yytext(); return PuntoComa;
            }
          // fall through
          case 170: break;
          case 12:
            { lexeme=yytext(); return Operador_comparativo;
            }
          // fall through
          case 171: break;
          case 13:
            { lexeme=yytext(); return Asigna;
            }
          // fall through
          case 172: break;
          case 14:
            { lexeme=yytext(); return Identificador;
            }
          // fall through
          case 173: break;
          case 15:
            { lexeme=yytext(); return Corchete_Izq;
            }
          // fall through
          case 174: break;
          case 16:
            { lexeme=yytext(); return Corchete_Der;
            }
          // fall through
          case 175: break;
          case 17:
            { lexeme=yytext(); return Llave_Izq;
            }
          // fall through
          case 176: break;
          case 18:
            { lexeme=yytext(); return Llave_Der;
            }
          // fall through
          case 177: break;
          case 19:
            { lexeme = yytext(); return Literal;
            }
          // fall through
          case 178: break;
          case 20:
            { lexeme=yytext(); return Operadores_aritmeticos;
            }
          // fall through
          case 179: break;
          case 21:
            { lexeme=yytext(); return Pertenencia;
            }
          // fall through
          case 180: break;
          case 22:
            { lexeme=yytext(); return Salto_si_es_igual;
            }
          // fall through
          case 181: break;
          case 23:
            { lexeme=yytext(); return Salto_si_es_mayor;
            }
          // fall through
          case 182: break;
          case 24:
            { lexeme=yytext(); return Salto_si_es_menor;
            }
          // fall through
          case 183: break;
          case 25:
            { lexeme=yytext(); return Operadores_logicos;
            }
          // fall through
          case 184: break;
          case 26:
            { lexeme=yytext(); return Bucles;
            }
          // fall through
          case 185: break;
          case 27:
            { lexeme=yytext(); return Declaracion_de_funcion;
            }
          // fall through
          case 186: break;
          case 28:
            { lexeme=yytext(); return Si;
            }
          // fall through
          case 187: break;
          case 29:
            { lexeme=yytext(); return Referencia;
            }
          // fall through
          case 188: break;
          case 30:
            { lexeme=yytext(); return Funcion_matematica;
            }
          // fall through
          case 189: break;
          case 31:
            { lexeme=yytext(); return Limpiador;
            }
          // fall through
          case 190: break;
          case 32:
            { lexeme=yytext(); return Comparacion;
            }
          // fall through
          case 191: break;
          case 33:
            { lexeme=yytext(); return Decremento;
            }
          // fall through
          case 192: break;
          case 34:
            { lexeme=yytext(); return Division;
            }
          // fall through
          case 193: break;
          case 35:
            { lexeme=yytext(); return Fin_de_bloque;
            }
          // fall through
          case 194: break;
          case 36:
            { lexeme=yytext(); return Puntero;
            }
          // fall through
          case 195: break;
          case 37:
            { lexeme=yytext(); return Recuperar;
            }
          // fall through
          case 196: break;
          case 38:
            { lexeme=yytext(); return Incremento;
            }
          // fall through
          case 197: break;
          case 39:
            { lexeme=yytext(); return Interrupcion;
            }
          // fall through
          case 198: break;
          case 40:
            { lexeme=yytext(); return Salto_si_es_mayor_igual;
            }
          // fall through
          case 199: break;
          case 41:
            { lexeme=yytext(); return Salto_si_es_menor_igual;
            }
          // fall through
          case 200: break;
          case 42:
            { lexeme=yytext(); return Salto;
            }
          // fall through
          case 201: break;
          case 43:
            { lexeme=yytext(); return Salto_si_es_diferente;
            }
          // fall through
          case 202: break;
          case 44:
            { lexeme=yytext(); return Transferencia;
            }
          // fall through
          case 203: break;
          case 45:
            { lexeme=yytext(); return Quitar_de_pila;
            }
          // fall through
          case 204: break;
          case 46:
            { lexeme=yytext(); return Retorno;
            }
          // fall through
          case 205: break;
          case 47:
            { lexeme=yytext(); return Desplazamiento_izquierda;
            }
          // fall through
          case 206: break;
          case 48:
            { lexeme=yytext(); return Desplazamiento_derecha;
            }
          // fall through
          case 207: break;
          case 49:
            { lexeme=yytext(); return Compresor;
            }
          // fall through
          case 208: break;
          case 50:
            { lexeme=yytext(); return Agregador;
            }
          // fall through
          case 209: break;
          case 51:
            { lexeme=yytext(); return Tipo_de_dato;
            }
          // fall through
          case 210: break;
          case 52:
            { lexeme=yytext(); return Eliminador;
            }
          // fall through
          case 211: break;
          case 53:
            { lexeme=yytext(); return Asociacion;
            }
          // fall through
          case 212: break;
          case 54:
            { lexeme=yytext(); return Ciclo_Para;
            }
          // fall through
          case 213: break;
          case 55:
            { lexeme=yytext(); return Funcion_de_mapeo;
            }
          // fall through
          case 214: break;
          case 56:
            { lexeme=yytext(); return Modificador_de_acceso;
            }
          // fall through
          case 215: break;
          case 57:
            { lexeme=yytext(); return Generador_de_objetos;
            }
          // fall through
          case 216: break;
          case 58:
            { lexeme=yytext(); return Hardware;
            }
          // fall through
          case 217: break;
          case 59:
            { lexeme=yytext(); return Arriba;
            }
          // fall through
          case 218: break;
          case 60:
            { lexeme=yytext(); return Intento;
            }
          // fall through
          case 219: break;
          case 61:
            { lexeme=yytext(); return Invocador;
            }
          // fall through
          case 220: break;
          case 62:
            { lexeme=yytext(); return Inicializador;
            }
          // fall through
          case 221: break;
          case 63:
            { lexeme=yytext(); return Evaluador_de_tiempo;
            }
          // fall through
          case 222: break;
          case 64:
            { lexeme=yytext(); return Alto;
            }
          // fall through
          case 223: break;
          case 65:
            { lexeme=yytext(); return Retorno_e_interrupcion;
            }
          // fall through
          case 224: break;
          case 66:
            { lexeme=yytext(); return Combinadores;
            }
          // fall through
          case 225: break;
          case 67:
            { lexeme=yytext(); return Busqueda;
            }
          // fall through
          case 226: break;
          case 68:
            { lexeme=yytext(); return Valores_especiales;
            }
          // fall through
          case 227: break;
          case 69:
            { lexeme=yytext(); return Abridor_de_archivos;
            }
          // fall through
          case 228: break;
          case 70:
            { lexeme=yytext(); return Insertar_en_pila;
            }
          // fall through
          case 229: break;
          case 71:
            { lexeme=yytext(); return Guardar;
            }
          // fall through
          case 230: break;
          case 72:
            { lexeme=yytext(); return Caso;
            }
          // fall through
          case 231: break;
          case 73:
            { lexeme=yytext(); return Copiar;
            }
          // fall through
          case 232: break;
          case 74:
            { lexeme=yytext(); return Sino_pregunta;
            }
          // fall through
          case 233: break;
          case 75:
            { lexeme=yytext(); return Sino;
            }
          // fall through
          case 234: break;
          case 76:
            { lexeme=yytext(); return Seguridad;
            }
          // fall through
          case 235: break;
          case 77:
            { lexeme=yytext(); return Tipo_de_estructura;
            }
          // fall through
          case 236: break;
          case 78:
            { lexeme=yytext(); return Izquierda;
            }
          // fall through
          case 237: break;
          case 79:
            { lexeme=yytext(); return Principal;
            }
          // fall through
          case 238: break;
          case 80:
            { lexeme=yytext(); return Hacer_nada;
            }
          // fall through
          case 239: break;
          case 81:
            { lexeme=yytext(); return Abstraccion;
            }
          // fall through
          case 240: break;
          case 82:
            { lexeme=yytext(); return Bloque_paralelo;
            }
          // fall through
          case 241: break;
          case 83:
            { lexeme=yytext(); return Retorno_vacio;
            }
          // fall through
          case 242: break;
          case 84:
            { lexeme=yytext(); return Alineación;
            }
          // fall through
          case 243: break;
          case 85:
            { lexeme=yytext(); return Alterador;
            }
          // fall through
          case 244: break;
          case 86:
            { lexeme=yytext(); return Color;
            }
          // fall through
          case 245: break;
          case 87:
            { lexeme=yytext(); return Fin_de_pregunta;
            }
          // fall through
          case 246: break;
          case 88:
            { lexeme=yytext(); return Ingresa;
            }
          // fall through
          case 247: break;
          case 89:
            { lexeme=yytext(); return Restriccion;
            }
          // fall through
          case 248: break;
          case 90:
            { lexeme=yytext(); return Movimiento_con_byte;
            }
          // fall through
          case 249: break;
          case 91:
            { lexeme=yytext(); return Movimiento_con_palabras;
            }
          // fall through
          case 250: break;
          case 92:
            { lexeme=yytext(); return Mezclador_de_estructura;
            }
          // fall through
          case 251: break;
          case 93:
            { lexeme=yytext(); return Union;
            }
          // fall through
          case 252: break;
          case 94:
            { lexeme=yytext(); return Condicion;
            }
          // fall through
          case 253: break;
          case 95:
            { lexeme=yytext(); return Asincronia;
            }
          // fall through
          case 254: break;
          case 96:
            { lexeme=yytext(); return Multimedia;
            }
          // fall through
          case 255: break;
          case 97:
            { lexeme=yytext(); return Atrapa_errores;
            }
          // fall through
          case 256: break;
          case 98:
            { lexeme=yytext(); return Crear_clase;
            }
          // fall through
          case 257: break;
          case 99:
            { lexeme=yytext(); return Clonar_objeto;
            }
          // fall through
          case 258: break;
          case 100:
            { lexeme=yytext(); return Concurrencia;
            }
          // fall through
          case 259: break;
          case 101:
            { lexeme=yytext(); return Pregunta;
            }
          // fall through
          case 260: break;
          case 102:
            { lexeme=yytext(); return Coincide;
            }
          // fall through
          case 261: break;
          case 103:
            { lexeme=yytext(); return Herencia;
            }
          // fall through
          case 262: break;
          case 104:
            { lexeme=yytext(); return Imprime;
            }
          // fall through
          case 263: break;
          case 105:
            { lexeme=yytext(); return Excepcion;
            }
          // fall through
          case 264: break;
          case 106:
            { lexeme=yytext(); return Derecha;
            }
          // fall through
          case 265: break;
          case 107:
            { lexeme=yytext(); return Implementacion;
            }
          // fall through
          case 266: break;
          case 108:
            { lexeme=yytext(); return Ciclo_Mientras;
            }
          // fall through
          case 267: break;
          case 109:
            { lexeme=yytext(); return Dimension_anchura;
            }
          // fall through
          case 268: break;
          case 110:
            { lexeme=yytext(); return Suspensor_de_funcion;
            }
          // fall through
          case 269: break;
          case 111:
            { lexeme=yytext(); return Agregador_a_lista;
            }
          // fall through
          case 270: break;
          case 112:
            { lexeme=yytext(); return Transaccion;
            }
          // fall through
          case 271: break;
          case 113:
            { lexeme=yytext(); return Asignador_de_memoria;
            }
          // fall through
          case 272: break;
          case 114:
            { lexeme=yytext(); return Creador_de_estructura;
            }
          // fall through
          case 273: break;
          case 115:
            { lexeme=yytext(); return Agrupación;
            }
          // fall through
          case 274: break;
          case 116:
            { lexeme=yytext(); return Insertar;
            }
          // fall through
          case 275: break;
          case 117:
            { lexeme=yytext(); return Operador_de_direccion;
            }
          // fall through
          case 276: break;
          case 118:
            { lexeme=yytext(); return Consulta;
            }
          // fall through
          case 277: break;
          case 119:
            { lexeme=yytext(); return Clase_sellada;
            }
          // fall through
          case 278: break;
          case 120:
            { lexeme=yytext(); return Actualizar;
            }
          // fall through
          case 279: break;
          case 121:
            { lexeme=yytext(); return Memoria_dinamica;
            }
          // fall through
          case 280: break;
          case 122:
            { lexeme=yytext(); return Depuracion;
            }
          // fall through
          case 281: break;
          case 123:
            { lexeme=yytext(); return Abajo;
            }
          // fall through
          case 282: break;
          case 124:
            { lexeme=yytext(); return Exportador;
            }
          // fall through
          case 283: break;
          case 125:
            { lexeme=yytext(); return Dimension_altura;
            }
          // fall through
          case 284: break;
          case 126:
            { lexeme=yytext(); return Importar;
            }
          // fall through
          case 285: break;
          case 127:
            { lexeme=yytext(); return Margen;
            }
          // fall through
          case 286: break;
          case 128:
            { lexeme=yytext(); return Declarador_de_metodos;
            }
          // fall through
          case 287: break;
          case 129:
            { lexeme=yytext(); return Modulo;
            }
          // fall through
          case 288: break;
          case 130:
            { lexeme=yytext(); return Devuelve_valor;
            }
          // fall through
          case 289: break;
          case 131:
            { lexeme=yytext(); return Medidor_de_variables;
            }
          // fall through
          case 290: break;
          case 132:
            { lexeme=yytext(); return Condicion_con_rango;
            }
          // fall through
          case 291: break;
          case 133:
            { lexeme=yytext(); return Relacionador;
            }
          // fall through
          case 292: break;
          case 134:
            { lexeme=yytext(); return Por_defecto;
            }
          // fall through
          case 293: break;
          case 135:
            { lexeme=yytext(); return Clase_principal;
            }
          // fall through
          case 294: break;
          case 136:
            { lexeme=yytext(); return Declaracion_de_segmento;
            }
          // fall through
          case 295: break;
          case 137:
            { lexeme=yytext(); return Detonador;
            }
          // fall through
          case 296: break;
          case 138:
            { lexeme=yytext(); return Ordenador;
            }
          // fall through
          case 297: break;
          case 139:
            { lexeme=yytext(); return Espaciado;
            }
          // fall through
          case 298: break;
          case 140:
            { lexeme=yytext(); return Posicion;
            }
          // fall through
          case 299: break;
          case 141:
            { lexeme=yytext(); return Reductor_de_tamaño;
            }
          // fall through
          case 300: break;
          case 142:
            { lexeme=yytext(); return Reanudar;
            }
          // fall through
          case 301: break;
          case 143:
            { lexeme=yytext(); return Desbordamiento;
            }
          // fall through
          case 302: break;
          case 144:
            { lexeme=yytext(); return Modificador_de_variable;
            }
          // fall through
          case 303: break;
          case 145:
            { lexeme=yytext(); return Interseccion;
            }
          // fall through
          case 304: break;
          case 146:
            { lexeme=yytext(); return Union_global;
            }
          // fall through
          case 305: break;
          case 147:
            { lexeme=yytext(); return Interfaz;
            }
          // fall through
          case 306: break;
          case 148:
            { lexeme=yytext(); return Maxima_anchura;
            }
          // fall through
          case 307: break;
          case 149:
            { lexeme=yytext(); return Dimension_maxima_anchura;
            }
          // fall through
          case 308: break;
          case 150:
            { lexeme=yytext(); return Soltar_indice;
            }
          // fall through
          case 309: break;
          case 151:
            { lexeme=yytext(); return Instanciador;
            }
          // fall through
          case 310: break;
          case 152:
            { lexeme=yytext(); return Dimension_maxima_altura;
            }
          // fall through
          case 311: break;
          case 153:
            { lexeme=yytext(); return Minima_altura;
            }
          // fall through
          case 312: break;
          case 154:
            { lexeme=yytext(); return Visibilidad;
            }
          // fall through
          case 313: break;
          case 155:
            { lexeme=yytext(); return Clave_de_relacion;
            }
          // fall through
          case 314: break;
          case 156:
            { lexeme=yytext(); return Clave;
            }
          // fall through
          case 315: break;
          case 157:
            { lexeme=yytext(); return Constructor;
            }
          // fall through
          case 316: break;
          case 158:
            { lexeme=yytext(); return Creador_de_tabla;
            }
          // fall through
          case 317: break;
          case 159:
            { lexeme=yytext(); return Color_de_fondo;
            }
          // fall through
          case 318: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
