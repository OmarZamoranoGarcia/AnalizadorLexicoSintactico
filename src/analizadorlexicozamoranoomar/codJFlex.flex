package analizadorlexicozamoranoomar;
import static analizadorlexicozamoranoomar.Tokens.*;
%%
%class codJFlex
%type Tokens
L=[a-zA-Z_]+
D = [0-9]+
NUMDECIMAL = {D}"."{D}+   
NUMEROS= {D} | {NUMDECIMAL}
espacio=[ \t\r\n]+
LITERAL = \"([^\"\\]|\\.)*\"
%{
public String lexeme;
%}
%%
{espacio} {/*Ignore*/}
"//".* {/*Ignore*/}
main {lexeme=yytext(); return Principal;}
bottom {lexeme=yytext(); return Abajo;}
open | Open {lexeme=yytext(); return Abridor_de_archivos;}
abstract | self {lexeme=yytext(); return Abstraccion;}
UPDATE | update {lexeme=yytext(); return Actualizar;}
add {lexeme=yytext(); return Agregador;}
append | Append {lexeme=yytext(); return Agregador_a_lista;}
"GROUP BY" | HAVING {lexeme=yytext(); return Agrupación;}
ALIGN {lexeme=yytext(); return Alineación;}
ALTER | CHECK {lexeme=yytext(); return Alterador;}
EXIT | break | await | stop {lexeme=yytext(); return Alto;}
top {lexeme=yytext(); return Arriba;}
= | set | SET {lexeme=yytext(); return Asigna;}
COMMON | unsafe {lexeme=yytext(); return Asignador_de_memoria;}
async {lexeme=yytext(); return Asincronia;}
dup | with {lexeme=yytext(); return Asociacion;}
catch {lexeme=yytext(); return Atrapa_errores;}
spmd {lexeme=yytext(); return Bloque_paralelo;}
do | loop | parfor {lexeme=yytext(); return Bucles;}
while {lexeme=yytext(); return Ciclo_Mientras;}
for {lexeme=yytext(); return Ciclo_Para;}
LIKE {lexeme=yytext(); return Busqueda;}
"!" | "?" | "@" | "#" | "$" | "%" {lexeme=yytext(); return Caracter_especial;}
case {lexeme=yytext(); return Caso;}
Program {lexeme=yytext(); return Clase_principal;}
sealed | Sealed {lexeme=yytext(); return Clase_sellada;}
"PRIMARY KEY" | "primary key" {lexeme=yytext(); return Clave;}
"FOREIGN KEY" | "foreign key" {lexeme=yytext(); return Clave_de_relacion;}
clone {lexeme=yytext(); return Clonar_objeto;}
match {lexeme=yytext(); return Coincide;}
color | Color {lexeme=yytext(); return Color;}
background-color {lexeme=yytext(); return Color_de_fondo;}
"INNER JOIN" | "RIGHT JOIN" | "FULL JOIN" | JOIN | "LEFT JOIN" {lexeme=yytext(); return Combinadores;}
CMP | EQUIVALENCE {lexeme=yytext(); return Comparacion;}
zip | ZIP {lexeme=yytext(); return Compresor;}
defer | acquire | synchronized {lexeme=yytext(); return Concurrencia;}
WHERE {lexeme=yytext(); return Condicion;}
BETWEEN {lexeme=yytext(); return Condicion_con_rango;}
constructor {lexeme=yytext(); return Constructor;}
SELECT {lexeme=yytext(); return Consulta;}
copy {lexeme=yytext(); return Copiar;}
CREATE | struct {lexeme=yytext(); return Creador_de_estructura;}
"CREATE TABLE" {lexeme=yytext(); return Creador_de_tabla;}
class {lexeme=yytext(); return Crear_clase;}
function | def | fn {lexeme=yytext(); return Declaracion_de_funcion;}
SEGMENT {lexeme=yytext(); return Declaracion_de_segmento;}
method {lexeme=yytext(); return Declarador_de_metodos;}
DEC {lexeme=yytext(); return Decremento;}
assert | fixture {lexeme=yytext(); return Depuracion;}
right {lexeme=yytext(); return Derecha;}
overflow {lexeme=yytext(); return Desbordamiento;}
SHR {lexeme=yytext(); return Desplazamiento_derecha;}
SHL {lexeme=yytext(); return Desplazamiento_izquierda;}
TRIGGER {lexeme=yytext(); return Detonador;}
return {lexeme=yytext(); return Devuelve_valor;}
height {lexeme=yytext(); return Dimension_altura;}
width {lexeme=yytext(); return Dimension_anchura;}
max-height {lexeme=yytext(); return Dimension_maxima_altura;}
min-width {lexeme=yytext(); return Dimension_maxima_anchura;}
DIV {lexeme=yytext(); return Division;}
del | DROP | DELETE | delete {lexeme=yytext(); return Eliminador;}
padding {lexeme=yytext(); return Espaciado;}
eval | EVAL {lexeme=yytext(); return Evaluador_de_tiempo;}
except | EXCEPT | finally | raise {lexeme=yytext(); return Excepcion;}
export {lexeme=yytext(); return Exportador;}
END | ENDS {lexeme=yytext(); return Fin_de_bloque;}
ENDIF {lexeme=yytext(); return Fin_de_pregunta;}
map {lexeme=yytext(); return Funcion_de_mapeo;}
MAX | COUNT | MIN | AVG | SUM | MUL | lambda | SUB | ADD | sin | cos | tan | log {lexeme=yytext(); return Funcion_matematica;}
new {lexeme=yytext(); return Generador_de_objetos;}
SAVE {lexeme=yytext(); return Guardar;}
pass {lexeme=yytext(); return Hacer_nada;}
port | gpio | uart | pwm {lexeme=yytext(); return Hardware;}
extends | super | mixin | extension {lexeme=yytext(); return Herencia;}
trait {lexeme=yytext(); return Implementacion;}
import {lexeme=yytext(); return Importar;}
print {lexeme=yytext(); return Imprime;}
INC | AUTO_INCREMENT {lexeme=yytext(); return Incremento;}
input | Input {lexeme=yytext(); return Ingresa;}
DATA | init {lexeme=yytext(); return Inicializador;}
INSERT | insert {lexeme=yytext(); return Insertar;}
PUSH | push {lexeme=yytext(); return Insertar_en_pila;}
instanceof {lexeme=yytext(); return Instanciador;}
try | throw {lexeme=yytext(); return Intento;}
implements | interface {lexeme=yytext(); return Interfaz;}
INT {lexeme=yytext(); return Interrupcion;}
INTERSECT {lexeme=yytext(); return Interseccion;}
call | CALL {lexeme=yytext(); return Invocador;}
left {lexeme=yytext(); return Izquierda;}
clear | CLS {lexeme=yytext(); return Limpiador;}
margin {lexeme=yytext(); return Margen;}
max-width {lexeme=yytext(); return Maxima_anchura;}
sizeof {lexeme=yytext(); return Medidor_de_variables;}
alloca {lexeme=yytext(); return Memoria_dinamica;}
merge | Merge {lexeme=yytext(); return Mezclador_de_estructura;}
min-height {lexeme=yytext(); return Minima_altura;}
external | public | extern | protected | private | static | virtual | override | pub | mut | reified {lexeme=yytext(); return Modificador_de_acceso;}
volatile {lexeme=yytext(); return Modificador_de_variable;}
module {lexeme=yytext(); return Modulo;}
MOVSB {lexeme=yytext(); return Movimiento_con_byte;}
MOVSW {lexeme=yytext(); return Movimiento_con_palabras;}
pixel | audio | render | frame {lexeme=yytext(); return Multimedia;}
"<" | ">" | "==" | "<=" | ">=" {lexeme=yytext(); return Operador_comparativo;}
OFFSET {lexeme=yytext(); return Operador_de_direccion;}
"+ " | "* " | "- " | "/ " {lexeme=yytext(); return Operadores_aritmeticos;}
AND | OR | NOT | XOR {lexeme=yytext(); return Operadores_logicos;}
"ORDER BY" | package {lexeme=yytext(); return Ordenador;}
IN | in {lexeme=yytext(); return Pertenencia;}
default | DEFAULT {lexeme=yytext(); return Por_defecto;}
position | Position {lexeme=yytext(); return Posicion;}
switch | EXISTS | empty | IS NULL {lexeme=yytext(); return Pregunta;}
if {lexeme=yytext(); return Si;}
PTR | FAR | NEAR {lexeme=yytext(); return Puntero;}
POP {lexeme=yytext(); return Quitar_de_pila;}
continue {lexeme=yytext(); return Reanudar;}
get | GET {lexeme=yytext(); return Recuperar;}
TRUNCATE {lexeme=yytext(); return Reductor_de_tamaño;}
this | FROM | to {lexeme=yytext(); return Referencia;}
CASCADE {lexeme=yytext(); return Relacionador;}
LIMIT | RESTRICT {lexeme=yytext(); return Restriccion;}
RET {lexeme=yytext(); return Retorno;}
IRET {lexeme=yytext(); return Retorno_e_interrupcion;}
void {lexeme=yytext(); return Retorno_vacio;}
goto | JMP {lexeme=yytext(); return Salto;}
JNE {lexeme=yytext(); return Salto_si_es_diferente;}
JE {lexeme=yytext(); return Salto_si_es_igual;}
JG {lexeme=yytext(); return Salto_si_es_mayor;}
JGE {lexeme=yytext(); return Salto_si_es_mayor_igual;}
JL {lexeme=yytext(); return Salto_si_es_menor;}
JLE {lexeme=yytext(); return Salto_si_es_menor_igual;}
encrypt | decrypt | hash | salt {lexeme=yytext(); return Seguridad;}
")" {lexeme=yytext(); return Parentesis_Der;}
"(" {lexeme=yytext(); return Parentesis_Izq;}
"]" {lexeme=yytext(); return Corchete_Der;}
"[" {lexeme=yytext(); return Corchete_Izq;}
"}" {lexeme=yytext(); return Llave_Der;}
"{" {lexeme=yytext(); return Llave_Izq;}
\" | \' {lexeme=yytext(); return Comillas;}
"," {lexeme=yytext(); return Coma;}
"." {lexeme=yytext(); return Punto;}
":" {lexeme=yytext(); return DosPuntos;}
";" {lexeme=yytext(); return PuntoComa;}
else | otherwise {lexeme=yytext(); return Sino;}
elif | else if {lexeme=yytext(); return Sino_pregunta;}
"DROP INDEX" {lexeme=yytext(); return Soltar_indice;}
yield {lexeme=yytext(); return Suspensor_de_funcion;}
object | boolean | DWORD | unsigned | QWORD | float | WORD | var | TBYTE | FWORD | string | byte | char | long | const | enum | double | let | BYTE | int | decimal | bit | nchar | complex | persistent {lexeme=yytext(); return Tipo_de_dato;} 
stack | queue | heap | graph {lexeme=yytext(); return Tipo_de_estructura;}
COMMIT | ROLLBACK | SAVEPOINT | TRANSACTION {lexeme=yytext(); return Transaccion;}
MOV | mov {lexeme=yytext(); return Transferencia;}
INCLUDE | UNION {lexeme=yytext(); return Union;}
"UNION ALL" {lexeme=yytext(); return Union_global;}
null | undefined | NULL {lexeme=yytext(); return Valores_especiales;}
visibility {lexeme=yytext(); return Visibilidad;}
{L}({L}|{D})* {lexeme=yytext(); return Identificador;}
"-"?{NUMEROS} {lexeme = yytext();return Numero;}
{D}+{L}+({L}|{D})* { lexeme = yytext(); return Error; }
[!@#$%?]{L}({L}|{D})* { lexeme = yytext(); return Error; }
[!@#$%?]{NUMEROS} { lexeme = yytext(); return Error; }
{LITERAL} { lexeme = yytext(); return Literal; }
. {lexeme = yytext(); return Error;}