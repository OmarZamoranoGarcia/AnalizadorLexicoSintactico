
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorlexicozamoranoomar;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\005\004" +
    "\000\002\005\002\000\002\006\014\000\002\007\006\000" +
    "\002\007\002\000\002\010\005\000\002\011\004\000\002" +
    "\011\002\000\002\012\004\000\002\012\002\000\002\013" +
    "\014\000\002\014\005\000\002\014\002\000\002\015\004" +
    "\000\002\015\002\000\002\016\005\000\002\017\010\000" +
    "\002\020\004\000\002\020\002\000\002\021\003\000\002" +
    "\021\003\000\002\024\012\000\002\025\002\000\002\025" +
    "\004\000\002\026\002\000\002\026\005\000\002\022\004" +
    "\000\002\022\002\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\027\006\000\002\027\003" +
    "\000\002\030\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\007\000\002\033\004\000\002" +
    "\034\004\000\002\034\002\000\002\035\012\000\002\036" +
    "\002\000\002\036\004\000\002\037\004\000\002\037\002" +
    "\000\002\040\007\000\002\041\005\000\002\042\003\000" +
    "\002\042\003\000\002\043\011\000\002\044\013\000\002" +
    "\045\012\000\002\045\002\000\002\046\006\000\002\047" +
    "\013\000\002\050\004\000\002\051\003\000\002\051\003" +
    "\000\002\052\007\000\002\053\006\000\002\054\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\012\015\ufffe\023\ufffe\027\ufffe\032\007\001" +
    "\002\000\012\015\ufffe\023\ufffe\027\ufffe\032\007\001\002" +
    "\000\004\002\266\001\002\000\010\015\ufffb\023\ufffb\027" +
    "\014\001\002\000\004\004\010\001\002\000\004\011\011" +
    "\001\002\000\012\015\ufffd\023\ufffd\027\ufffd\032\ufffd\001" +
    "\002\000\006\015\164\023\ufff3\001\002\000\010\015\ufffb" +
    "\023\ufffb\027\014\001\002\000\004\015\015\001\002\000" +
    "\004\004\016\001\002\000\004\007\017\001\002\000\004" +
    "\010\020\001\002\000\004\022\021\001\002\000\030\004" +
    "\ufff8\006\ufff8\015\ufff8\016\ufff8\021\ufff8\030\ufff8\034\ufff8" +
    "\037\ufff8\043\023\045\ufff8\046\ufff8\001\002\000\026\004" +
    "\043\006\053\015\uffe1\016\046\021\uffe1\030\057\034\034" +
    "\037\056\045\040\046\045\001\002\000\004\007\024\001" +
    "\002\000\004\016\025\001\002\000\004\004\030\001\002" +
    "\000\004\010\027\001\002\000\026\004\ufff9\006\ufff9\015" +
    "\ufff9\016\ufff9\021\ufff9\030\ufff9\034\ufff9\037\ufff9\045\ufff9" +
    "\046\ufff9\001\002\000\006\005\031\010\ufff5\001\002\000" +
    "\004\016\025\001\002\000\004\010\ufff7\001\002\000\004" +
    "\010\ufff6\001\002\000\004\007\210\001\002\000\030\004" +
    "\uffda\006\uffda\015\uffda\016\uffda\017\uffda\021\uffda\030\uffda" +
    "\034\uffda\037\uffda\045\uffda\046\uffda\001\002\000\030\004" +
    "\uffd5\006\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\030\uffd5" +
    "\034\uffd5\037\uffd5\045\uffd5\046\uffd5\001\002\000\006\015" +
    "\164\021\ufff3\001\002\000\004\007\157\001\002\000\030" +
    "\004\uffdc\006\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\030" +
    "\uffdc\034\uffdc\037\uffdc\045\uffdc\046\uffdc\001\002\000\030" +
    "\004\uffdf\006\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\030" +
    "\uffdf\034\uffdf\037\uffdf\045\uffdf\046\uffdf\001\002\000\012" +
    "\007\144\011\142\020\143\042\141\001\002\000\030\004" +
    "\uffd7\006\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\030\uffd7" +
    "\034\uffd7\037\uffd7\045\uffd7\046\uffd7\001\002\000\004\007" +
    "\135\001\002\000\004\026\122\001\002\000\030\004\uffdb" +
    "\006\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\030\uffdb\034" +
    "\uffdb\037\uffdb\045\uffdb\046\uffdb\001\002\000\030\004\uffd8" +
    "\006\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\030\uffd8\034" +
    "\uffd8\037\uffd8\045\uffd8\046\uffd8\001\002\000\030\004\uffde" +
    "\006\uffde\015\uffde\016\uffde\017\uffde\021\uffde\030\uffde\034" +
    "\uffde\037\uffde\045\uffde\046\uffde\001\002\000\030\004\uffdd" +
    "\006\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\030\uffdd\034" +
    "\uffdd\037\uffdd\045\uffdd\046\uffdd\001\002\000\004\007\107" +
    "\001\002\000\030\004\043\006\053\015\uffe1\016\046\017" +
    "\uffe1\021\uffe1\030\057\034\034\037\056\045\040\046\045" +
    "\001\002\000\030\004\uffe0\006\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\021\uffe0\030\uffe0\034\uffe0\037\uffe0\045\uffe0\046\uffe0" +
    "\001\002\000\004\007\072\001\002\000\004\004\062\001" +
    "\002\000\030\004\uffd9\006\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\030\uffd9\034\uffd9\037\uffd9\045\uffd9\046\uffd9\001" +
    "\002\000\004\022\067\001\002\000\004\031\063\001\002" +
    "\000\006\004\066\012\064\001\002\000\010\005\uffc5\010" +
    "\uffc5\022\uffc5\001\002\000\010\005\uffc6\010\uffc6\022\uffc6" +
    "\001\002\000\010\005\uffc4\010\uffc4\022\uffc4\001\002\000" +
    "\024\004\043\006\053\016\046\021\uffe1\030\057\034\034" +
    "\037\056\045\040\046\045\001\002\000\004\021\071\001" +
    "\002\000\030\004\uffc7\006\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\030\uffc7\034\uffc7\037\uffc7\045\uffc7\046\uffc7\001" +
    "\002\000\004\004\062\001\002\000\004\005\074\001\002" +
    "\000\004\004\076\001\002\000\004\010\102\001\002\000" +
    "\006\040\100\041\101\001\002\000\004\010\uffbd\001\002" +
    "\000\004\010\uffbc\001\002\000\004\010\uffbb\001\002\000" +
    "\004\022\103\001\002\000\024\004\043\006\053\016\046" +
    "\021\uffe1\030\057\034\034\037\056\045\040\046\045\001" +
    "\002\000\004\021\105\001\002\000\030\004\uffbe\006\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\021\uffbe\030\uffbe\034\uffbe\037" +
    "\uffbe\045\uffbe\046\uffbe\001\002\000\010\015\uffe2\017\uffe2" +
    "\021\uffe2\001\002\000\010\004\113\012\110\013\111\001" +
    "\002\000\012\005\uffd2\010\uffd2\011\uffd2\025\uffd2\001\002" +
    "\000\012\005\uffd1\010\uffd1\011\uffd1\025\uffd1\001\002\000" +
    "\006\005\117\010\uffcd\001\002\000\012\005\uffd3\010\uffd3" +
    "\011\uffd3\025\uffd3\001\002\000\004\010\115\001\002\000" +
    "\004\011\116\001\002\000\030\004\uffd0\006\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\021\uffd0\030\uffd0\034\uffd0\037\uffd0\045" +
    "\uffd0\046\uffd0\001\002\000\010\004\113\012\110\013\111" +
    "\001\002\000\004\010\uffcf\001\002\000\004\010\uffce\001" +
    "\002\000\004\025\123\001\002\000\004\004\124\001\002" +
    "\000\004\020\125\001\002\000\004\026\126\001\002\000" +
    "\012\004\113\012\110\013\111\025\uffcb\001\002\000\004" +
    "\025\134\001\002\000\010\005\131\010\uffc8\025\uffc8\001" +
    "\002\000\014\004\113\010\uffcb\012\110\013\111\025\uffcb" +
    "\001\002\000\006\010\uffca\025\uffca\001\002\000\006\010" +
    "\uffc9\025\uffc9\001\002\000\030\004\uffcc\006\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\030\uffcc\034\uffcc\037\uffcc\045" +
    "\uffcc\046\uffcc\001\002\000\004\013\136\001\002\000\004" +
    "\010\137\001\002\000\004\011\140\001\002\000\030\004" +
    "\uffb8\006\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\030\uffb8" +
    "\034\uffb8\037\uffb8\045\uffb8\046\uffb8\001\002\000\004\033" +
    "\152\001\002\000\030\004\uffd4\006\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\021\uffd4\030\uffd4\034\uffd4\037\uffd4\045\uffd4\046" +
    "\uffd4\001\002\000\010\004\113\012\110\013\111\001\002" +
    "\000\012\004\113\010\uffcb\012\110\013\111\001\002\000" +
    "\004\010\146\001\002\000\004\011\147\001\002\000\030" +
    "\004\uffba\006\uffba\015\uffba\016\uffba\017\uffba\021\uffba\030" +
    "\uffba\034\uffba\037\uffba\045\uffba\046\uffba\001\002\000\004" +
    "\011\151\001\002\000\030\004\uffd6\006\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\030\uffd6\034\uffd6\037\uffd6\045\uffd6" +
    "\046\uffd6\001\002\000\004\007\153\001\002\000\010\004" +
    "\113\012\110\013\111\001\002\000\004\010\155\001\002" +
    "\000\004\011\156\001\002\000\030\004\uffc3\006\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\030\uffc3\034\uffc3\037\uffc3" +
    "\045\uffc3\046\uffc3\001\002\000\004\010\160\001\002\000" +
    "\004\011\161\001\002\000\030\004\uffb9\006\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\021\uffb9\030\uffb9\034\uffb9\037\uffb9\045" +
    "\uffb9\046\uffb9\001\002\000\004\021\207\001\002\000\010" +
    "\015\164\021\ufff3\023\ufff3\001\002\000\004\024\165\001" +
    "\002\000\004\004\166\001\002\000\004\007\167\001\002" +
    "\000\006\010\ufff0\016\170\001\002\000\004\004\202\001" +
    "\002\000\004\010\172\001\002\000\004\022\173\001\002" +
    "\000\024\004\043\006\053\016\046\017\uffe1\030\057\034" +
    "\034\037\056\045\040\046\045\001\002\000\004\017\175" +
    "\001\002\000\010\004\113\012\110\013\111\001\002\000" +
    "\004\021\177\001\002\000\010\015\ufff2\021\ufff2\023\ufff2" +
    "\001\002\000\004\011\201\001\002\000\004\021\uffed\001" +
    "\002\000\006\005\203\010\uffee\001\002\000\006\010\ufff0" +
    "\016\170\001\002\000\004\010\ufff1\001\002\000\004\010" +
    "\uffef\001\002\000\006\021\ufff4\023\ufff4\001\002\000\010" +
    "\015\ufffa\023\ufffa\027\ufffa\001\002\000\004\004\062\001" +
    "\002\000\004\010\212\001\002\000\004\022\213\001\002" +
    "\000\024\004\043\006\053\016\046\021\uffe1\030\057\034" +
    "\034\037\056\045\040\046\045\001\002\000\004\021\215" +
    "\001\002\000\006\035\uffc0\036\217\001\002\000\004\035" +
    "\227\001\002\000\004\007\220\001\002\000\004\004\062" +
    "\001\002\000\004\010\222\001\002\000\004\022\223\001" +
    "\002\000\024\004\043\006\053\016\046\021\uffe1\030\057" +
    "\034\034\037\056\045\040\046\045\001\002\000\004\021" +
    "\225\001\002\000\006\035\uffc0\036\217\001\002\000\004" +
    "\035\uffc1\001\002\000\004\022\231\001\002\000\030\004" +
    "\uffc2\006\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\030\uffc2" +
    "\034\uffc2\037\uffc2\045\uffc2\046\uffc2\001\002\000\024\004" +
    "\043\006\053\016\046\021\uffe1\030\057\034\034\037\056" +
    "\045\040\046\045\001\002\000\004\021\233\001\002\000" +
    "\030\004\uffbf\006\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf" +
    "\030\uffbf\034\uffbf\037\uffbf\045\uffbf\046\uffbf\001\002\000" +
    "\006\015\ufffc\023\ufffc\001\002\000\004\023\237\001\002" +
    "\000\004\002\000\001\002\000\004\007\240\001\002\000" +
    "\004\010\241\001\002\000\004\022\242\001\002\000\024" +
    "\004\244\006\053\016\046\021\uffea\030\057\034\034\037" +
    "\056\045\040\046\045\001\002\000\024\004\uffe8\006\uffe8" +
    "\016\uffe8\021\uffe8\030\uffe8\034\uffe8\037\uffe8\045\uffe8\046" +
    "\uffe8\001\002\000\012\007\144\011\142\020\252\042\141" +
    "\001\002\000\004\021\251\001\002\000\024\004\244\006" +
    "\053\016\046\021\uffea\030\057\034\034\037\056\045\040" +
    "\046\045\001\002\000\024\004\uffe9\006\uffe9\016\uffe9\021" +
    "\uffe9\030\uffe9\034\uffe9\037\uffe9\045\uffe9\046\uffe9\001\002" +
    "\000\004\021\uffeb\001\002\000\004\002\uffec\001\002\000" +
    "\012\004\113\012\110\013\111\044\253\001\002\000\004" +
    "\004\254\001\002\000\004\007\255\001\002\000\012\004" +
    "\113\010\uffe6\012\110\013\111\001\002\000\004\010\264" +
    "\001\002\000\006\005\261\010\uffe4\001\002\000\004\010" +
    "\uffe5\001\002\000\010\004\113\012\110\013\111\001\002" +
    "\000\006\005\261\010\uffe4\001\002\000\004\010\uffe3\001" +
    "\002\000\004\011\265\001\002\000\024\004\uffe7\006\uffe7" +
    "\016\uffe7\021\uffe7\030\uffe7\034\uffe7\037\uffe7\045\uffe7\046" +
    "\uffe7\001\002\000\004\002\001\001\002\000\010\015\uffff" +
    "\023\uffff\027\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\010\002\004\003\005\004\003\001\001\000" +
    "\006\003\266\004\003\001\001\000\002\001\001\000\006" +
    "\005\011\006\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\234\013\162\001\001" +
    "\000\006\005\233\006\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\021\001\001\000\034\022\036\023" +
    "\053\027\054\030\035\032\041\035\050\040\051\043\040" +
    "\044\046\047\034\052\057\053\047\054\043\001\001\000" +
    "\002\001\001\000\004\010\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\031\001" +
    "\001\000\004\010\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\161\013\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\022\105\023\053\027\054" +
    "\030\035\032\041\035\050\040\051\043\040\044\046\047" +
    "\034\052\057\053\047\054\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\022\067\023\053\027\054\030\035\032\041" +
    "\035\050\040\051\043\040\044\046\047\034\052\057\053" +
    "\047\054\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\072\001\001\000\002\001\001\000\004\050" +
    "\074\001\001\000\002\001\001\000\004\051\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\022\103\023\053\027\054\030\035" +
    "\032\041\035\050\040\051\043\040\044\046\047\034\052" +
    "\057\053\047\054\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\111\033\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\111\033\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\127\036\126\001\001\000\002\001\001\000\004\037" +
    "\131\001\001\000\006\031\127\036\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\147\001" +
    "\001\000\006\031\127\036\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\111\033\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\205\013\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\022\173\023\053\027\054\030\035" +
    "\032\041\035\050\040\051\043\040\044\046\047\034\052" +
    "\057\053\047\054\043\001\001\000\004\016\175\001\001" +
    "\000\004\031\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\203" +
    "\001\001\000\004\014\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\022\213\023\053\027\054\030\035\032\041\035\050" +
    "\040\051\043\040\044\046\047\034\052\057\053\047\054" +
    "\043\001\001\000\002\001\001\000\004\045\215\001\001" +
    "\000\004\046\227\001\001\000\002\001\001\000\004\041" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\022\223\023\053\027\054\030\035\032\041\035\050\040" +
    "\051\043\040\044\046\047\034\052\057\053\047\054\043" +
    "\001\001\000\002\001\001\000\004\045\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\022\231\023\053\027\054\030\035\032\041\035\050\040" +
    "\051\043\040\044\046\047\034\052\057\053\047\054\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\020" +
    "\244\021\245\023\246\024\242\027\054\030\035\032\041" +
    "\035\050\040\051\043\040\044\046\047\034\052\057\053" +
    "\047\054\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\020\247\021\245\023\246\024" +
    "\242\027\054\030\035\032\041\035\050\040\051\043\040" +
    "\044\046\047\034\052\057\053\047\054\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\255\031\256\001\001\000\002\001\001\000\004" +
    "\026\257\001\001\000\002\001\001\000\004\031\261\001" +
    "\001\000\004\026\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){       
        System.out.println("Error Sintáctico en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{         
        System.out.println("Error síntactico en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MILENGUAJE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MILENGUAJE ::= Librerias Clases Metodos MetodoPrincipal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MILENGUAJE",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Librerias ::= Libreria Librerias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Librerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Librerias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Librerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Libreria ::= Importar Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Libreria",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Clases ::= Clase Clases 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clases",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Clases ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clases",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Clase ::= Crear_clase Modificador_de_acceso Identificador Parentesis_Izq Parentesis_Der Llave_Izq ConstructorClase ListaInstSencillas Metodos Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clase",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstructorClase ::= Constructor Parentesis_Izq ParametroConstructorClase Parentesis_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstructorClase",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstructorClase ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstructorClase",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParametroConstructorClase ::= Tipo_de_dato Identificador ParametroConstructorClaseMas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroConstructorClase",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParametroConstructorClaseMas ::= Coma ParametroConstructorClase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroConstructorClaseMas",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ParametroConstructorClaseMas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroConstructorClaseMas",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Metodos ::= Metodo Metodos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Metodos",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Metodos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Metodos",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Metodo ::= Modificador_de_acceso Declarador_de_metodos Identificador Parentesis_Izq ParametroMetodo Parentesis_Der Llave_Izq ListaInstSencillas Retorno Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Metodo",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParametroMetodo ::= Tipo_de_dato Identificador ParametroMetodoMas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroMetodo",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParametroMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroMetodo",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParametroMetodoMas ::= Coma ParametroMetodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroMetodoMas",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParametroMetodoMas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroMetodoMas",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Retorno ::= Devuelve_valor IdNuLi PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Retorno",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MetodoPrincipal ::= Principal Parentesis_Izq Parentesis_Der Llave_Izq ListaInstruccionesMain Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoPrincipal",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListaInstruccionesMain ::= InstruccionesMain ListaInstruccionesMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstruccionesMain",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListaInstruccionesMain ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstruccionesMain",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstruccionesMain ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesMain",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InstruccionesMain ::= InstCrearObjeto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesMain",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InstCrearObjeto ::= Identificador Asigna Generador_de_objetos Identificador Parentesis_Izq ParametrosObjeto Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstCrearObjeto",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParametrosObjeto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosObjeto",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParametrosObjeto ::= IdNuLi MasParametrosObjeto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosObjeto",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MasParametrosObjeto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosObjeto",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MasParametrosObjeto ::= Coma IdNuLi MasParametrosObjeto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosObjeto",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListaInstSencillas ::= Instrucciones ListaInstSencillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstSencillas",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListaInstSencillas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstSencillas",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instrucciones ::= InstVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instrucciones ::= InstPrint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= InstArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= InstWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instrucciones ::= InstrAddArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instrucciones ::= InstIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instrucciones ::= InstFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instrucciones ::= InstLlamarMetodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instrucciones ::= InstInput 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instrucciones ::= InstArbirArchivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InstVariable ::= Identificador Asigna IdNuLi PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstVariable",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InstVariable ::= VariableVacia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstVariable",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VariableVacia ::= Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VariableVacia",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IdNuLi ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IdNuLi",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IdNuLi ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IdNuLi",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IdNuLi ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IdNuLi",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InstPrint ::= Imprime Parentesis_Izq ParametroPrint Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstPrint",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParametroPrint ::= IdNuLi MasParametrosPrint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroPrint",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MasParametrosPrint ::= Coma ParametroPrint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosPrint",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MasParametrosPrint ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosPrint",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstArreglo ::= Tipo_de_dato Corchete_Izq Corchete_Der Identificador Asigna Corchete_Izq ParametroArreglo Corchete_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstArreglo",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ParametroArreglo ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroArreglo",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ParametroArreglo ::= IdNuLi MasParametrosArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroArreglo",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MasParametrosArreglo ::= Coma ParametroArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosArreglo",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MasParametrosArreglo ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasParametrosArreglo",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InstWhile ::= Ciclo_Mientras Condicion Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstWhile",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Condicion ::= Identificador Operador_comparativo NuId 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NuId ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NuId",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NuId ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NuId",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InstrAddArreglo ::= Identificador Punto Agregador Parentesis_Izq ParametroPrint Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstrAddArreglo",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InstIf ::= Si Parentesis_Izq Condicion Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der IfSino SinoIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstIf",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfSino ::= Sino_pregunta Parentesis_Izq Condicion Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der IfSino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IfSino",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IfSino ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IfSino",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SinoIf ::= Sino Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SinoIf",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InstFor ::= Ciclo_Para Parentesis_Izq Condicion Coma SubeBaja Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstFor",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SubeBaja ::= Identificador IncDec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SubeBaja",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IncDec ::= Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncDec",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IncDec ::= Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncDec",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InstLlamarMetodo ::= Identificador Parentesis_Izq ParametroArreglo Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLlamarMetodo",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // InstInput ::= Ingresa Parentesis_Izq Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstInput",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InstArbirArchivo ::= Abridor_de_archivos Parentesis_Izq Literal Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstArbirArchivo",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
