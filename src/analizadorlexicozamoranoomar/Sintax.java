
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorlexicozamoranoomar;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\006\010\000" +
    "\002\043\004\000\002\043\002\000\002\044\003\000\002" +
    "\044\003\000\002\045\012\000\002\042\002\000\002\042" +
    "\003\000\002\042\005\000\002\007\005\000\002\010\012" +
    "\000\002\052\004\000\002\052\003\000\002\046\006\000" +
    "\002\011\014\000\002\013\003\000\002\013\002\000\002" +
    "\014\004\000\002\014\006\000\002\026\005\000\002\026" +
    "\005\000\002\012\004\000\002\012\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\007\000\002\040\003\000\002\040\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\017\006\000" +
    "\002\017\004\000\002\020\012\000\002\041\002\000\002" +
    "\041\003\000\002\041\005\000\002\024\007\000\002\025" +
    "\005\000\002\025\005\000\002\027\011\000\002\032\013" +
    "\000\002\033\003\000\002\033\002\000\002\034\011\000" +
    "\002\034\012\000\002\035\006\000\002\036\013\000\002" +
    "\037\004\000\002\037\004\000\002\047\007\000\002\050" +
    "\006\000\002\051\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\012\015\ufffe\023\ufffe\027\ufffe\032\007\001" +
    "\002\000\012\015\ufffe\023\ufffe\027\ufffe\032\007\001\002" +
    "\000\004\002\256\001\002\000\010\015\ufffc\023\ufffc\027" +
    "\014\001\002\000\004\004\010\001\002\000\004\011\011" +
    "\001\002\000\012\015\ufff0\023\ufff0\027\ufff0\032\ufff0\001" +
    "\002\000\006\015\213\023\ufffa\001\002\000\010\015\ufffc" +
    "\023\ufffc\027\014\001\002\000\004\015\015\001\002\000" +
    "\004\004\016\001\002\000\004\007\017\001\002\000\004" +
    "\010\020\001\002\000\004\022\021\001\002\000\026\004" +
    "\030\006\043\016\035\021\uffe3\030\047\034\022\037\046" +
    "\043\033\045\025\046\032\001\002\000\004\007\163\001" +
    "\002\000\026\004\uffdc\006\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\030\uffdc\034\uffdc\037\uffdc\045\uffdc\046\uffdc\001\002\000" +
    "\004\021\uffed\001\002\000\004\007\160\001\002\000\026" +
    "\004\uffe2\006\uffe2\016\uffe2\017\uffe2\021\uffe2\030\uffe2\034" +
    "\uffe2\037\uffe2\045\uffe2\046\uffe2\001\002\000\026\004\uffde" +
    "\006\uffde\016\uffde\017\uffde\021\uffde\030\uffde\034\uffde\037" +
    "\uffde\045\uffde\046\uffde\001\002\000\012\007\142\011\140" +
    "\020\141\042\137\001\002\000\026\004\uffd9\006\uffd9\016" +
    "\uffd9\017\uffd9\021\uffd9\030\uffd9\034\uffd9\037\uffd9\045\uffd9" +
    "\046\uffd9\001\002\000\004\007\133\001\002\000\004\007" +
    "\123\001\002\000\024\004\030\006\043\016\035\021\uffe3" +
    "\030\047\034\022\037\046\045\025\046\032\001\002\000" +
    "\004\026\110\001\002\000\004\021\107\001\002\000\026" +
    "\004\uffdd\006\uffdd\016\uffdd\017\uffdd\021\uffdd\030\uffdd\034" +
    "\uffdd\037\uffdd\045\uffdd\046\uffdd\001\002\000\026\004\uffda" +
    "\006\uffda\016\uffda\017\uffda\021\uffda\030\uffda\034\uffda\037" +
    "\uffda\045\uffda\046\uffda\001\002\000\026\004\uffe0\006\uffe0" +
    "\016\uffe0\017\uffe0\021\uffe0\030\uffe0\034\uffe0\037\uffe0\045" +
    "\uffe0\046\uffe0\001\002\000\026\004\uffdf\006\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\030\uffdf\034\uffdf\037\uffdf\045\uffdf\046" +
    "\uffdf\001\002\000\004\007\075\001\002\000\026\004\030" +
    "\006\043\016\035\017\uffe3\021\uffe3\030\047\034\022\037" +
    "\046\045\025\046\032\001\002\000\026\004\uffe1\006\uffe1" +
    "\016\uffe1\017\uffe1\021\uffe1\030\uffe1\034\uffe1\037\uffe1\045" +
    "\uffe1\046\uffe1\001\002\000\004\007\061\001\002\000\004" +
    "\004\052\001\002\000\026\004\uffdb\006\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\030\uffdb\034\uffdb\037\uffdb\045\uffdb\046\uffdb" +
    "\001\002\000\004\022\056\001\002\000\004\031\053\001" +
    "\002\000\006\004\055\012\054\001\002\000\010\005\uffcb" +
    "\010\uffcb\022\uffcb\001\002\000\010\005\uffca\010\uffca\022" +
    "\uffca\001\002\000\024\004\030\006\043\016\035\021\uffe3" +
    "\030\047\034\022\037\046\045\025\046\032\001\002\000" +
    "\004\021\060\001\002\000\026\004\uffcc\006\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\030\uffcc\034\uffcc\037\uffcc\045\uffcc\046" +
    "\uffcc\001\002\000\004\004\052\001\002\000\004\005\063" +
    "\001\002\000\004\004\065\001\002\000\004\010\070\001" +
    "\002\000\006\040\066\041\067\001\002\000\004\010\uffc1" +
    "\001\002\000\004\010\uffc0\001\002\000\004\022\071\001" +
    "\002\000\024\004\030\006\043\016\035\021\uffe3\030\047" +
    "\034\022\037\046\045\025\046\032\001\002\000\004\021" +
    "\073\001\002\000\026\004\uffc2\006\uffc2\016\uffc2\017\uffc2" +
    "\021\uffc2\030\uffc2\034\uffc2\037\uffc2\045\uffc2\046\uffc2\001" +
    "\002\000\006\017\uffe4\021\uffe4\001\002\000\010\004\101" +
    "\012\076\013\077\001\002\000\012\005\uffd4\010\uffd4\011" +
    "\uffd4\025\uffd4\001\002\000\012\005\uffd3\010\uffd3\011\uffd3" +
    "\025\uffd3\001\002\000\006\005\105\010\uffd7\001\002\000" +
    "\012\005\uffd5\010\uffd5\011\uffd5\025\uffd5\001\002\000\004" +
    "\010\103\001\002\000\004\011\104\001\002\000\026\004" +
    "\uffd8\006\uffd8\016\uffd8\017\uffd8\021\uffd8\030\uffd8\034\uffd8" +
    "\037\uffd8\045\uffd8\046\uffd8\001\002\000\010\004\101\012" +
    "\076\013\077\001\002\000\004\010\uffd6\001\002\000\010" +
    "\015\uffef\023\uffef\027\uffef\001\002\000\004\025\111\001" +
    "\002\000\004\004\112\001\002\000\004\020\113\001\002" +
    "\000\004\026\114\001\002\000\012\004\101\012\076\013" +
    "\077\025\uffcf\001\002\000\006\005\120\025\uffce\001\002" +
    "\000\004\025\117\001\002\000\026\004\uffd0\006\uffd0\016" +
    "\uffd0\017\uffd0\021\uffd0\030\uffd0\034\uffd0\037\uffd0\045\uffd0" +
    "\046\uffd0\001\002\000\012\004\101\012\076\013\077\025" +
    "\uffcf\001\002\000\004\025\uffcd\001\002\000\004\021\uffee" +
    "\001\002\000\006\010\uffe9\016\124\001\002\000\004\004" +
    "\130\001\002\000\004\010\127\001\002\000\004\010\uffea" +
    "\001\002\000\024\004\uffec\006\uffec\016\uffec\021\uffec\030" +
    "\uffec\034\uffec\037\uffec\045\uffec\046\uffec\001\002\000\006" +
    "\005\131\010\uffe8\001\002\000\004\016\124\001\002\000" +
    "\004\010\uffe7\001\002\000\004\013\134\001\002\000\004" +
    "\010\135\001\002\000\004\011\136\001\002\000\026\004" +
    "\uffbd\006\uffbd\016\uffbd\017\uffbd\021\uffbd\030\uffbd\034\uffbd" +
    "\037\uffbd\045\uffbd\046\uffbd\001\002\000\004\033\153\001" +
    "\002\000\026\004\uffd1\006\uffd1\016\uffd1\017\uffd1\021\uffd1" +
    "\030\uffd1\034\uffd1\037\uffd1\045\uffd1\046\uffd1\001\002\000" +
    "\010\004\101\012\076\013\077\001\002\000\012\004\101" +
    "\010\ufff3\012\076\013\077\001\002\000\006\005\147\010" +
    "\ufff2\001\002\000\004\010\145\001\002\000\004\011\146" +
    "\001\002\000\026\004\uffbf\006\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\030\uffbf\034\uffbf\037\uffbf\045\uffbf\046\uffbf\001\002" +
    "\000\012\004\101\010\ufff3\012\076\013\077\001\002\000" +
    "\004\010\ufff1\001\002\000\004\011\152\001\002\000\026" +
    "\004\uffd2\006\uffd2\016\uffd2\017\uffd2\021\uffd2\030\uffd2\034" +
    "\uffd2\037\uffd2\045\uffd2\046\uffd2\001\002\000\004\007\154" +
    "\001\002\000\010\004\101\012\076\013\077\001\002\000" +
    "\004\010\156\001\002\000\004\011\157\001\002\000\026" +
    "\004\uffc9\006\uffc9\016\uffc9\017\uffc9\021\uffc9\030\uffc9\034" +
    "\uffc9\037\uffc9\045\uffc9\046\uffc9\001\002\000\004\010\161" +
    "\001\002\000\004\011\162\001\002\000\026\004\uffbe\006" +
    "\uffbe\016\uffbe\017\uffbe\021\uffbe\030\uffbe\034\uffbe\037\uffbe" +
    "\045\uffbe\046\uffbe\001\002\000\004\004\052\001\002\000" +
    "\004\010\165\001\002\000\004\022\166\001\002\000\024" +
    "\004\030\006\043\016\035\021\uffe3\030\047\034\022\037" +
    "\046\045\025\046\032\001\002\000\004\021\170\001\002" +
    "\000\006\035\uffc6\036\173\001\002\000\004\035\203\001" +
    "\002\000\004\035\uffc7\001\002\000\004\007\174\001\002" +
    "\000\004\004\052\001\002\000\004\010\176\001\002\000" +
    "\004\022\177\001\002\000\024\004\030\006\043\016\035" +
    "\021\uffe3\030\047\034\022\037\046\045\025\046\032\001" +
    "\002\000\004\021\201\001\002\000\006\035\uffc5\036\173" +
    "\001\002\000\004\035\uffc4\001\002\000\004\022\205\001" +
    "\002\000\026\004\uffc8\006\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\030\uffc8\034\uffc8\037\uffc8\045\uffc8\046\uffc8\001\002\000" +
    "\024\004\030\006\043\016\035\021\uffe3\030\047\034\022" +
    "\037\046\045\025\046\032\001\002\000\004\021\207\001" +
    "\002\000\026\004\uffc3\006\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\030\uffc3\034\uffc3\037\uffc3\045\uffc3\046\uffc3\001\002\000" +
    "\006\015\ufffd\023\ufffd\001\002\000\004\023\234\001\002" +
    "\000\006\015\213\023\ufffa\001\002\000\004\024\214\001" +
    "\002\000\004\004\215\001\002\000\004\007\216\001\002" +
    "\000\006\010\uffe9\016\124\001\002\000\004\010\220\001" +
    "\002\000\004\022\221\001\002\000\024\004\030\006\043" +
    "\016\035\017\uffe3\030\047\034\022\037\046\045\025\046" +
    "\032\001\002\000\004\017\223\001\002\000\006\004\227" +
    "\012\226\001\002\000\004\021\225\001\002\000\006\015" +
    "\uffeb\023\uffeb\001\002\000\004\011\231\001\002\000\004" +
    "\011\230\001\002\000\004\021\uffe6\001\002\000\004\021" +
    "\uffe5\001\002\000\004\023\ufffb\001\002\000\004\002\000" +
    "\001\002\000\004\007\235\001\002\000\004\010\236\001" +
    "\002\000\004\022\237\001\002\000\024\004\241\006\043" +
    "\016\035\021\ufff7\030\047\034\022\037\046\045\025\046" +
    "\032\001\002\000\024\004\ufff5\006\ufff5\016\ufff5\021\ufff5" +
    "\030\ufff5\034\ufff5\037\ufff5\045\ufff5\046\ufff5\001\002\000" +
    "\012\007\142\011\140\020\247\042\137\001\002\000\004" +
    "\021\246\001\002\000\024\004\241\006\043\016\035\021" +
    "\ufff7\030\047\034\022\037\046\045\025\046\032\001\002" +
    "\000\024\004\ufff6\006\ufff6\016\ufff6\021\ufff6\030\ufff6\034" +
    "\ufff6\037\ufff6\045\ufff6\046\ufff6\001\002\000\004\021\ufff8" +
    "\001\002\000\004\002\ufff9\001\002\000\012\004\101\012" +
    "\076\013\077\044\250\001\002\000\004\004\251\001\002" +
    "\000\004\007\252\001\002\000\012\004\101\010\ufff3\012" +
    "\076\013\077\001\002\000\004\010\254\001\002\000\004" +
    "\011\255\001\002\000\024\004\ufff4\006\ufff4\016\ufff4\021" +
    "\ufff4\030\ufff4\034\ufff4\037\ufff4\045\ufff4\046\ufff4\001\002" +
    "\000\004\002\001\001\002\000\010\015\uffff\023\uffff\027" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\002\004\003\005\007\003\001\001\000" +
    "\006\003\256\007\003\001\001\000\002\001\001\000\006" +
    "\004\011\010\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\210\011\211\001\001" +
    "\000\006\004\207\010\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\023\015\043\016\025\017\044\020" +
    "\040\024\041\027\026\032\036\036\022\046\033\047\047" +
    "\050\037\051\030\052\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\012\121" +
    "\015\043\016\025\017\044\020\040\024\041\027\026\032" +
    "\036\036\022\047\047\050\037\051\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\073\015\043\016\025\017\044\020\040\024" +
    "\041\027\026\032\036\036\022\047\047\050\037\051\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\056\015\043\016\025\017\044\020\040" +
    "\024\041\027\026\032\036\036\022\047\047\050\037\051" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\061\001\001\000\002\001\001\000\004\037\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\012\071\015" +
    "\043\016\025\017\044\020\040\024\041\027\026\032\036" +
    "\036\022\047\047\050\037\051\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\077" +
    "\040\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\077\040\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\114\041\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\114\041\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\124" +
    "\014\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\150\001\001\000" +
    "\006\021\142\042\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\142\042\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\077\040" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\166\015\043\016\025\017\044\020" +
    "\040\024\041\027\026\032\036\036\022\047\047\050\037" +
    "\051\030\001\001\000\002\001\001\000\006\033\170\034" +
    "\171\001\001\000\004\035\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\177\015\043\016\025" +
    "\017\044\020\040\024\041\027\026\032\036\036\022\047" +
    "\047\050\037\051\030\001\001\000\002\001\001\000\004" +
    "\034\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\205\015\043\016\025\017\044" +
    "\020\040\024\041\027\026\032\036\036\022\047\047\050" +
    "\037\051\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\232\001\001\000\006\005" +
    "\231\011\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\216\014\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\012\221\015\043" +
    "\016\025\017\044\020\040\024\041\027\026\032\036\036" +
    "\022\047\047\050\037\051\030\001\001\000\004\026\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\015\243\016\025\017\044\020\040\024\041\027\026\032" +
    "\036\036\022\043\241\044\242\045\237\047\047\050\037" +
    "\051\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\015\243\016\025\017\044\020\040" +
    "\024\041\027\026\032\036\036\022\043\244\044\242\045" +
    "\237\047\047\050\037\051\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\142" +
    "\042\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){       
        System.out.println("Error Sintáctico en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+"."); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{         
        System.out.println("Error síntactico en la Línea " + 
        (s.right)+ " Columna "+s.left+". Componente " + s.value + 
        " no reconocido."); 
    }   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MILENGUAJE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MILENGUAJE ::= Librerias Clases Metodos MetodoPrincipal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MILENGUAJE",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Librerias ::= Libreria Librerias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Librerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Librerias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Librerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Clases ::= Clase Clases 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clases",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Clases ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clases",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Metodos ::= Metodo Metodos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Metodos",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Metodos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Metodos",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MetodoPrincipal ::= Principal Parentesis_Izq Parentesis_Der Llave_Izq ListaInstruccionesMain Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoPrincipal",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListaInstruccionesMain ::= InstruccionesMain ListaInstruccionesMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstruccionesMain",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListaInstruccionesMain ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstruccionesMain",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InstruccionesMain ::= Instrucciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesMain",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InstruccionesMain ::= InstCrearObjeto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstruccionesMain",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InstCrearObjeto ::= Identificador Asigna Generador_de_objetos Identificador Parentesis_Izq ParametrosSencillos Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstCrearObjeto",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParametrosSencillos ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosSencillos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParametrosSencillos ::= IdNuLi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosSencillos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParametrosSencillos ::= IdNuLi Coma ParametrosSencillos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametrosSencillos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Libreria ::= Importar Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Libreria",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Clase ::= Crear_clase Modificador_de_acceso Identificador Parentesis_Izq Parentesis_Der Llave_Izq CuerpoClase Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clase",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CuerpoClase ::= ConstructorClase ListaInstSencillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CuerpoClase",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CuerpoClase ::= ListaInstSencillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CuerpoClase",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstructorClase ::= Constructor Parentesis_Izq Parametro Parentesis_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ConstructorClase",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Metodo ::= Modificador_de_acceso Declarador_de_metodos Identificador Parentesis_Izq Parametro Parentesis_Der Llave_Izq ListaInstSencillas Retorno Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Metodo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Parametro ::= Parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametro",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Parametro ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametro",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Parametros ::= Tipo_de_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Parametros ::= Tipo_de_dato Identificador Coma Parametros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Parametros",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Retorno ::= Devuelve_valor Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Retorno",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Retorno ::= Devuelve_valor Numero PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Retorno",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaInstSencillas ::= Instrucciones ListaInstSencillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstSencillas",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListaInstSencillas ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ListaInstSencillas",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instrucciones ::= InstPrint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instrucciones ::= InstVariable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instrucciones ::= InstArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instrucciones ::= InstWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= InstrAddArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= InstIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instrucciones ::= InstFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instrucciones ::= InstLlamarMetodo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instrucciones ::= InstInput 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instrucciones ::= InstArbirArchivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Instrucciones",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InstPrint ::= Imprime Parentesis_Izq ParametroIdNuLi Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstPrint",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParametroIdNuLi ::= IdNuLi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroIdNuLi",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParametroIdNuLi ::= IdNuLi Coma ParametroIdNuLi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroIdNuLi",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IdNuLi ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IdNuLi",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IdNuLi ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IdNuLi",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IdNuLi ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IdNuLi",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InstVariable ::= Identificador Asigna IdNuLi PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstVariable",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InstVariable ::= Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstVariable",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InstArreglo ::= Tipo_de_dato Corchete_Izq Corchete_Der Identificador Asigna Corchete_Izq ParametroIdNuLiArray Corchete_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstArreglo",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParametroIdNuLiArray ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroIdNuLiArray",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ParametroIdNuLiArray ::= IdNuLi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroIdNuLiArray",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ParametroIdNuLiArray ::= IdNuLi Coma ParametroIdNuLiArray 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParametroIdNuLiArray",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InstWhile ::= Ciclo_Mientras Condicion Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstWhile",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Condicion ::= Identificador Operador_comparativo Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Condicion ::= Identificador Operador_comparativo Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InstrAddArreglo ::= Identificador Punto Agregador Parentesis_Izq ParametroIdNuLi Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstrAddArreglo",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InstIf ::= Si Parentesis_Izq Condicion Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der IfSino SinoIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstIf",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfSino ::= MasIfSino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IfSino",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IfSino ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IfSino",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MasIfSino ::= Sino_pregunta Parentesis_Izq Condicion Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasIfSino",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MasIfSino ::= Sino_pregunta Parentesis_Izq Condicion Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der MasIfSino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MasIfSino",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SinoIf ::= Sino Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SinoIf",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InstFor ::= Ciclo_Para Parentesis_Izq Condicion Coma SubeBaja Parentesis_Der Llave_Izq ListaInstSencillas Llave_Der 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstFor",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SubeBaja ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SubeBaja",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SubeBaja ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SubeBaja",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InstLlamarMetodo ::= Identificador Parentesis_Izq ParametrosSencillos Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstLlamarMetodo",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // InstInput ::= Ingresa Parentesis_Izq Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstInput",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // InstArbirArchivo ::= Abridor_de_archivos Parentesis_Izq Literal Parentesis_Der PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InstArbirArchivo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
